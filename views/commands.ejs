<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Commands Manager - Discord Logger</title>
    <link rel="stylesheet" href="/css/style.css">
    <style>
        /* Inline Navbar Styles */
        .navbar {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding: 0.75rem 1.5rem;
            position: sticky;
            top: 0;
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 1.5rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }
        .nav-brand { display: flex; align-items: center; gap: 0.75rem; flex-shrink: 0; }
        .bot-avatar { width: 40px; height: 40px; border-radius: 50%; border: 2px solid rgba(88, 101, 242, 0.5); box-shadow: 0 0 12px rgba(88, 101, 242, 0.3); }
        .bot-info { display: flex; flex-direction: column; gap: 0.15rem; }
        .bot-info h2 { color: #fff; font-size: 1.1rem; margin: 0; font-weight: 600; line-height: 1; }
        .bot-status { color: #43b581; font-size: 0.7rem; font-weight: 500; line-height: 1; }
        .nav-center { flex: 1; display: flex; justify-content: center; overflow-x: auto; }
        .nav-links { display: flex; gap: 0.35rem; flex-wrap: nowrap; justify-content: center; }
        .nav-links a { color: var(--text-secondary); text-decoration: none; padding: 0.5rem 0.85rem; border-radius: 6px; transition: all 0.2s ease; font-weight: 500; font-size: 0.85rem; display: flex; align-items: center; gap: 0.4rem; white-space: nowrap; }
        .nav-icon { font-size: 0.95rem; }
        .nav-links a:hover { background: rgba(255, 255, 255, 0.1); color: #fff; transform: translateY(-1px); }
        .nav-links a.active { background: rgba(88, 101, 242, 0.25); color: var(--primary); box-shadow: 0 2px 8px rgba(88, 101, 242, 0.3); }
        .nav-user { display: flex; align-items: center; gap: 0.75rem; flex-shrink: 0; }
        .user-profile { display: flex; align-items: center; gap: 0.6rem; background: rgba(0, 0, 0, 0.3); padding: 0.4rem 0.8rem; border-radius: 8px; border: 1px solid rgba(255, 255, 255, 0.1); transition: all 0.3s ease; }
        .user-profile:hover { background: rgba(0, 0, 0, 0.4); border-color: rgba(88, 101, 242, 0.5); }
        .user-avatar { width: 32px; height: 32px; border-radius: 50%; border: 2px solid rgba(255, 255, 255, 0.2); }
        .user-avatar-placeholder { width: 32px; height: 32px; border-radius: 50%; background: rgba(88, 101, 242, 0.3); display: flex; align-items: center; justify-content: center; font-size: 1.3rem; border: 2px solid rgba(255, 255, 255, 0.2); }
        .user-details { display: flex; flex-direction: column; gap: 0.15rem; }
        .user-name { color: #fff; font-weight: 600; font-size: 0.85rem; line-height: 1; }
        .user-badge { font-size: 0.65rem; font-weight: 700; padding: 0.1rem 0.4rem; border-radius: 3px; text-transform: uppercase; letter-spacing: 0.3px; width: fit-content; line-height: 1; }
        .user-badge.admin { background: rgba(88, 101, 242, 0.3); color: #5865f2; }
        .user-badge.password { background: rgba(250, 166, 26, 0.3); color: #faa61a; }
        .logout-btn { background: rgba(237, 66, 69, 0.2); color: var(--danger); padding: 0.5rem; border-radius: 6px; transition: all 0.2s ease; display: flex; align-items: center; justify-content: center; text-decoration: none; border: 1px solid rgba(237, 66, 69, 0.3); width: 36px; height: 36px; }
        .logout-btn:hover { background: rgba(237, 66, 69, 0.3); transform: scale(1.08); }

        /* Enhanced Multi-Select Roles */
        .role-selector { position: relative; width: 100%; }
        .role-tags { min-height: 60px; padding: 0.75rem; background: rgba(0,0,0,0.3); border: 1px solid rgba(255,255,255,0.1); border-radius: 8px; display: flex; flex-wrap: wrap; gap: 0.5rem; cursor: pointer; transition: all 0.2s ease; }
        .role-tags:hover { border-color: rgba(88,101,242,0.5); }
        .role-tag { background: rgba(88,101,242,0.3); color: #5865f2; padding: 0.4rem 0.8rem; border-radius: 6px; display: flex; align-items: center; gap: 0.5rem; font-size: 0.85rem; }
        .role-tag-remove { cursor: pointer; font-weight: bold; opacity: 0.7; transition: opacity 0.2s; }
        .role-tag-remove:hover { opacity: 1; }
        .role-dropdown { position: absolute; top: 100%; left: 0; right: 0; max-height: 200px; overflow-y: auto; background: rgba(20,23,28,0.98); border: 1px solid rgba(88,101,242,0.5); border-radius: 8px; margin-top: 0.5rem; display: none; z-index: 1000; box-shadow: 0 4px 12px rgba(0,0,0,0.5); }
        .role-dropdown.active { display: block; }
        .role-option { padding: 0.75rem; cursor: pointer; transition: background 0.2s; border-bottom: 1px solid rgba(255,255,255,0.05); }
        .role-option:hover { background: rgba(88,101,242,0.2); }

        /* Tab Navigation */
        .tab-navigation { display: flex; gap: 0.5rem; margin-bottom: 2rem; border-bottom: 2px solid rgba(255,255,255,0.1); overflow-x: auto; }
        .tab-nav-btn { background: transparent; border: none; color: rgba(255,255,255,0.6); padding: 1rem 1.5rem; cursor: pointer; border-bottom: 3px solid transparent; transition: all 0.3s ease; font-weight: 600; white-space: nowrap; }
        .tab-nav-btn:hover { color: #fff; border-bottom-color: rgba(88,101,242,0.5); }
        .tab-nav-btn.active { color: #5865f2; border-bottom-color: #5865f2; }
        .tab-content { display: none; }
        .tab-content.active { display: block; }

        /* Copyable Content */
        .copy-btn { position: absolute; top: 1rem; right: 1rem; background: rgba(88,101,242,0.2); color: #5865f2; border: 1px solid rgba(88,101,242,0.3); padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; transition: all 0.2s ease; font-weight: 600; font-size: 0.85rem; }
        .copy-btn:hover { background: rgba(88,101,242,0.3); transform: translateY(-1px); }
        .copyable-content { background: rgba(0,0,0,0.4); padding: 1rem; border-radius: 6px; border: 1px solid rgba(255,255,255,0.1); margin-top: 1rem; font-family: 'Courier New', monospace; color: rgba(255,255,255,0.9); position: relative; }

        /* Sections */
        .sticky-section { background: linear-gradient(135deg, rgba(30,33,40,0.95) 0%, rgba(20,23,28,0.95) 100%); border: 1px solid rgba(250,166,26,0.3); border-radius: 12px; padding: 2rem; margin: 2rem 0; }
        .sticky-card { background: rgba(0,0,0,0.3); border: 1px solid rgba(250,166,26,0.3); border-radius: 8px; padding: 1.5rem; margin-bottom: 1rem; position: relative; }
        .sticky-indicator { display: inline-block; background: rgba(250,166,26,0.2); color: #faa61a; padding: 0.3rem 0.8rem; border-radius: 6px; font-size: 0.75rem; font-weight: 600; }

        .ruleset-section { background: linear-gradient(135deg, rgba(30,33,40,0.95) 0%, rgba(20,23,28,0.95) 100%); border: 1px solid rgba(237,66,69,0.3); border-radius: 12px; padding: 2rem; margin: 2rem 0; }
        .ruleset-card { background: rgba(0,0,0,0.3); border: 1px solid rgba(237,66,69,0.3); border-radius: 8px; padding: 1.5rem; margin-bottom: 1rem; position: relative; }
        .rule-list { list-style: none; padding: 0; margin: 1rem 0; }
        .rule-item { padding: 0.75rem; background: rgba(0,0,0,0.2); border-left: 3px solid #ed4245; margin-bottom: 0.5rem; border-radius: 4px; }

        .bulk-actions { background: rgba(88,101,242,0.1); border: 1px solid rgba(88,101,242,0.3); border-radius: 12px; padding: 1.5rem; margin: 2rem 0; }
        .channel-response-section { background: rgba(67,181,129,0.1); border: 1px solid rgba(67,181,129,0.3); border-radius: 8px; padding: 1.5rem; margin-top: 1rem; }
        .response-channel-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; margin-top: 1rem; }

        /* Command Cards */
        .form-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; margin-bottom: 2rem; }
        .command-card { background: linear-gradient(135deg, rgba(30,33,40,0.95) 0%, rgba(20,23,28,0.95) 100%); border: 1px solid rgba(88,101,242,0.3); border-radius: 12px; padding: 1.5rem; margin-bottom: 1rem; transition: all 0.3s ease; position: relative; }
        .command-card:hover { border-color: rgba(88,101,242,0.6); box-shadow: 0 4px 20px rgba(88,101,242,0.25); transform: translateY(-2px); }
        .command-card.disabled { opacity: 0.5; }
        .command-header { display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 1rem; padding-bottom: 1rem; border-bottom: 1px solid rgba(255,255,255,0.1); }
        .command-actions { display: flex; gap: 0.5rem; }
        .command-meta { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem; padding: 1rem; background: rgba(0,0,0,0.2); border-radius: 8px; }

        .badge-general { background: rgba(88,101,242,0.2); color: #5865f2; }
        .badge-fun { background: rgba(250,166,26,0.2); color: #faa61a; }
        .badge-moderation { background: rgba(237,66,69,0.2); color: #ed4245; }
        .badge-info { background: rgba(67,181,129,0.2); color: #43b581; }
        .role-badge { background: rgba(237,66,69,0.2); color: #ed4245; padding: 0.25rem 0.6rem; border-radius: 4px; font-size: 0.75rem; font-weight: 600; display: inline-flex; align-items: center; gap: 0.25rem; }
        .role-badge.exempt { background: rgba(67,181,129,0.2); color: #43b581; }

        /* Modal */
        .modal { display: none; position: fixed; z-index: 9999; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.7); backdrop-filter: blur(4px); }
        .modal-content { background: linear-gradient(135deg, rgba(30,33,40,0.98) 0%, rgba(20,23,28,0.98) 100%); margin: 3% auto; padding: 2rem; border: 1px solid rgba(88,101,242,0.3); border-radius: 12px; width: 90%; max-width: 800px; max-height: 90vh; overflow-y: auto; }
        .modal-header { display: flex; justify-content: space-between; align-items: center; padding-bottom: 1.5rem; margin-bottom: 2rem; border-bottom: 1px solid rgba(255,255,255,0.1); }
        .close { color: #aaa; font-size: 28px; font-weight: bold; cursor: pointer; line-height: 1; }
        .close:hover { color: #fff; }
        .form-row { display: grid; grid-template-columns: 1fr 1fr; gap: 1.5rem; margin-bottom: 1.5rem; }

        @media (max-width: 1400px) {
            .nav-links a span:not(.nav-icon) { display: none; }
            .nav-links a { padding: 0.5rem 0.6rem; }
        }
        @media (max-width: 1024px) {
            .navbar { flex-wrap: wrap; padding: 0.75rem 1rem; }
            .nav-center { order: 3; width: 100%; margin-top: 0.75rem; justify-content: flex-start; }
            .nav-links { justify-content: flex-start; }
            .bot-status { display: none; }
        }
        @media (max-width: 768px) {
            .navbar { padding: 0.6rem 0.8rem; }
            .bot-avatar { width: 36px; height: 36px; }
            .bot-info h2 { font-size: 1rem; }
            .user-details { display: none; }
            .user-avatar, .user-avatar-placeholder { width: 36px; height: 36px; }
            .nav-center { overflow-x: auto; -webkit-overflow-scrolling: touch; scrollbar-width: none; }
            .nav-center::-webkit-scrollbar { display: none; }
            .nav-links { gap: 0.25rem; }
            .nav-links a { padding: 0.45rem 0.55rem; font-size: 0.8rem; }
            .form-grid, .form-row { grid-template-columns: 1fr; }
            .response-channel-grid { grid-template-columns: 1fr; }
        }
    </style>
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar">
        <div class="nav-brand">
            <img src="<%= client.user.displayAvatarURL({ size: 64 }) %>" alt="Bot Avatar" class="bot-avatar">
            <div class="bot-info">
                <h2>Drug Dealer Simulator | Eddie</h2>
                <span class="bot-status">Online • Monitoring</span>
            </div>
        </div>
        
        <div class="nav-center">
            <div class="nav-links">
                <a href="/" class="<%= typeof page !== 'undefined' && page === 'dashboard' ? 'active' : '' %>">
                    <span class="nav-icon">📊</span> <span>Dashboard</span>
                </a>
                <a href="/messages" class="<%= typeof page !== 'undefined' && page === 'messages' ? 'active' : '' %>">
                    <span class="nav-icon">💬</span> <span>Messages</span>
                </a>
                <a href="/deleted" class="<%= typeof page !== 'undefined' && page === 'deleted' ? 'active' : '' %>">
                    <span class="nav-icon">🗑️</span> <span>Deleted</span>
                </a>
                <a href="/members" class="<%= typeof page !== 'undefined' && page === 'members' ? 'active' : '' %>">
                    <span class="nav-icon">👥</span> <span>Members</span>
                </a>
                <a href="/moderation" class="<%= typeof page !== 'undefined' && page === 'moderation' ? 'active' : '' %>">
                    <span class="nav-icon">🔨</span> <span>Moderation</span>
                </a>
                <a href="/attachments" class="<%= typeof page !== 'undefined' && page === 'attachments' ? 'active' : '' %>">
                    <span class="nav-icon">📎</span> <span>Attachments</span>
                </a>
                <a href="/voice" class="<%= typeof page !== 'undefined' && page === 'voice' ? 'active' : '' %>">
                    <span class="nav-icon">🔊</span> <span>Voice</span>
                </a>
                <a href="/invites" class="<%= typeof page !== 'undefined' && page === 'invites' ? 'active' : '' %>">
                    <span class="nav-icon">🎫</span> <span>Invites</span>
                </a>
                <a href="/commands" class="<%= typeof page !== 'undefined' && page === 'commands' ? 'active' : '' %>">
                    <span class="nav-icon">⚙️</span> <span>Commands</span>
                </a>
                <a href="/analytics" class="<%= typeof page !== 'undefined' && page === 'analytics' ? 'active' : '' %>">
                    <span class="nav-icon">📈</span> <span>Analytics</span>
                </a>
                <a href="/appeals" class="<%= page === 'appeals' ? 'active' : '' %>">
                    <span class="nav-icon">🎫</span> <span>Appeals</span>
                </a>
            </div>
        </div>

        <div class="nav-user">
            <% if (user) { %>
                <div class="user-profile">
                    <img src="<%= user.avatar %>" alt="<%= user.username %>" class="user-avatar">
                    <div class="user-details">
                        <span class="user-name"><%= user.username %></span>
                        <span class="user-badge admin">Admin</span>
                    </div>
                </div>
            <% } else { %>
                <div class="user-profile">
                    <div class="user-avatar-placeholder">👤</div>
                    <div class="user-details">
                        <span class="user-name">Admin</span>
                        <span class="user-badge password">Password Auth</span>
                    </div>
                </div>
            <% } %>
            
            <a href="/logout" class="logout-btn" title="Logout">
                <span class="nav-icon">🚪</span>
            </a>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container" style="margin-top: 2rem; max-width: 1400px; padding: 0 1.5rem;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 2rem;">
            <div>
                <h1 style="color: #fff; margin-bottom: 0.5rem; font-size: 2rem;">🎮 Commands Manager</h1>
                <p style="color: rgba(255,255,255,0.6); margin: 0;">Advanced command system with rulesets, sticky messages, and bulk actions</p>
            </div>
        </div>
        
        <!-- Tab Navigation -->
        <div class="tab-navigation">
            <button class="tab-nav-btn active" onclick="switchMainTab('commands')">💬 Commands</button>
            <button class="tab-nav-btn" onclick="switchMainTab('sticky')">📌 Sticky Messages</button>
            <button class="tab-nav-btn" onclick="switchMainTab('rulesets')">📋 Rulesets</button>
            <button class="tab-nav-btn" onclick="switchMainTab('bulk')">🔨 Bulk Actions</button>
            <button class="tab-nav-btn" onclick="switchMainTab('protection')">🛡️ Protection</button>
        </div>
        
        <!-- Commands Tab -->
        <div id="tab-commands" class="tab-content active">
            <div style="display: flex; gap: 0.75rem; margin-bottom: 2rem; flex-wrap: wrap;">
                <button onclick="toggleCreateForm()" class="btn btn-primary">➕ Create Command</button>
                <a href="/commands/settings" class="btn btn-secondary" style="text-decoration: none;">⚙️ Command Settings</a>
                <a href="/commands/all" class="btn btn-secondary" style="text-decoration: none;">📋 View All Commands</a>
            </div>

            <!-- Create Command Form -->
            <div id="createCommandSection" style="display: none; background: rgba(30,33,40,0.95); border: 1px solid rgba(88,101,242,0.3); border-radius: 12px; padding: 2rem; margin-bottom: 2rem;">
                <h2 style="color: #fff; margin-bottom: 1.5rem;">📝 Create New Command</h2>
                <form method="POST" action="/commands/create">
                    <div class="form-grid">
                        <div>
                            <div class="form-group">
                                <label>Command Name *</label>
                                <input type="text" name="name" required>
                            </div>
                            
                            <div class="form-group">
                                <label>Category</label>
                                <select name="category">
                                    <option value="general">General</option>
                                    <option value="fun">Fun</option>
                                    <option value="moderation">Moderation</option>
                                    <option value="info">Info</option>
                                    <option value="utility">Utility</option>
                                </select>
                            </div>
                            
                            <div class="form-group">
                                <label>Trigger Text *</label>
                                <input type="text" name="trigger" required>
                                <small>Separate multiple with commas</small>
                            </div>
                            
                            <div class="form-group">
                                <label>Required Roles</label>
                                <div class="role-selector">
                                    <div class="role-tags" id="requiredRoleTags" onclick="toggleRoleDropdown('required')">
                                        <span style="color: rgba(255,255,255,0.5);">Click to select roles...</span>
                                    </div>
                                    <div class="role-dropdown" id="requiredRoleDropdown"></div>
                                    <input type="hidden" name="requiredRoles" id="requiredRolesInput">
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label>Exempt Roles</label>
                                <div class="role-selector">
                                    <div class="role-tags" id="exemptRoleTags" onclick="toggleRoleDropdown('exempt')">
                                        <span style="color: rgba(255,255,255,0.5);">Click to select roles...</span>
                                    </div>
                                    <div class="role-dropdown" id="exemptRoleDropdown"></div>
                                    <input type="hidden" name="exemptRoles" id="exemptRolesInput">
                                </div>
                            </div>
                        </div>
                        
                        <div>
                            <div class="form-group">
                                <label>Response Type</label>
                                <select name="responseType">
                                    <option value="text">Text Message</option>
                                    <option value="embed">Embed</option>
                                    <option value="react">Reaction</option>
                                </select>
                            </div>
                            
                            <div class="form-group">
                                <label>Response Content</label>
                                <textarea name="response" rows="8" placeholder="Your response message here..."></textarea>
                                <small>Variables: {user}, {server}, {channel}</small>
                            </div>
                            
                            <div class="form-group">
                                <label>Description</label>
                                <textarea name="description" rows="2" placeholder="What does this command do?"></textarea>
                            </div>
                            
                            <div class="form-group">
                                <label><input type="checkbox" name="enabled" checked> Enabled</label>
                            </div>
                            
                            <div class="form-group">
                                <label><input type="checkbox" name="deleteTrigger"> Delete Trigger Message</label>
                            </div>
                        </div>
                    </div>
                    
                    <div style="display: flex; gap: 1rem; margin-top: 2rem; padding-top: 2rem; border-top: 1px solid rgba(255,255,255,0.1);">
                        <button type="button" onclick="toggleCreateForm()" class="btn btn-secondary">Cancel</button>
                        <button type="submit" class="btn btn-primary">💾 Create Command</button>
                    </div>
                </form>
            </div>
            
            <!-- Command List -->
            <div class="section">
                <h2 class="section-title">📋 Command List</h2>
                
                <div class="tabs">
                    <button class="tab active" onclick="filterCommands('all')">All</button>
                    <button class="tab" onclick="filterCommands('general')">General</button>
                    <button class="tab" onclick="filterCommands('fun')">Fun</button>
                    <button class="tab" onclick="filterCommands('moderation')">Moderation</button>
                    <button class="tab" onclick="filterCommands('info')">Info</button>
                    <button class="tab" onclick="filterCommands('utility')">Utility</button>
                </div>

                <div class="commands-table">
                    <% if (commands && commands.length > 0) { %>
                        <% commands.forEach(cmd => { %>
                            <div class="command-card <%= cmd.enabled ? '' : 'disabled' %>" data-category="<%= cmd.category || 'general' %>">
                                <div class="command-header">
                                    <div>
                                        <h3><%= cmd.name %></h3>
                                        <div>
                                            <span class="badge badge-<%= cmd.category || 'general' %>"><%= cmd.category || 'general' %></span>
                                            <% if (cmd.type === 'builtin') { %>
                                                <span class="badge" style="background: rgba(88, 101, 242, 0.3); color: #5865f2;">Built-in</span>
                                            <% } %>
                                            <span class="badge <%= cmd.enabled ? 'badge-enabled' : 'badge-disabled' %>">
                                                <%= cmd.enabled ? 'Enabled' : 'Disabled' %>
                                            </span>
                                        </div>
                                    </div>
                                    <div class="command-actions">
                                        <% if (cmd.type !== 'builtin') { %>
                                            <button class="btn-icon" onclick="editCommand('<%= cmd._id %>')" title="Edit">✏️</button>
                                        <% } %>
                                        <button class="btn-icon toggle" onclick="toggleCommand('<%= cmd._id %>', '<%= cmd.type %>')" title="Toggle">
                                            <%= cmd.enabled ? '⏸️' : '▶️' %>
                                        </button>
                                        <% if (cmd.type !== 'builtin') { %>
                                            <button class="btn-icon delete" onclick="if(confirm('Delete this command?')) { window.location.href='/commands/delete/<%= cmd._id %>' }" title="Delete">🗑️</button>
                                        <% } %>
                                    </div>
                                </div>
                                
                                <% if (cmd.description) { %>
                                    <p class="command-desc"><%= cmd.description %></p>
                                <% } %>
                                
                                <div class="command-meta">
                                    <div class="meta-item">
                                        <strong>Trigger</strong>
                                        <span><%= cmd.triggerType === 'command' ? '!' : '' %><%= Array.isArray(cmd.trigger) ? cmd.trigger.join(', ') : cmd.trigger %></span>
                                    </div>
                                    <div class="meta-item">
                                        <strong>Type</strong>
                                        <span><%= cmd.responseType %></span>
                                    </div>
                                    <div class="meta-item">
                                        <strong>Uses</strong>
                                        <span><%= cmd.uses || 0 %></span>
                                    </div>
                                </div>

                                <% if ((cmd.requiredRoles && cmd.requiredRoles.length > 0) || (cmd.exemptRoles && cmd.exemptRoles.length > 0)) { %>
                                    <div style="margin-top: 1rem; padding-top: 1rem; border-top: 1px solid rgba(255,255,255,0.1);">
                                        <% if (cmd.requiredRoles && cmd.requiredRoles.length > 0) { %>
                                            <div style="margin-bottom: 0.5rem;">
                                                <strong style="color: rgba(255,255,255,0.6); font-size: 0.75rem;">Required Roles:</strong>
                                                <div style="display: flex; flex-wrap: wrap; gap: 0.25rem; margin-top: 0.25rem;">
                                                    <% cmd.requiredRoles.forEach(roleId => { %>
                                                        <span class="role-badge" data-role-id="<%= roleId %>">🔒 <%= roleId %></span>
                                                    <% }) %>
                                                </div>
                                            </div>
                                        <% } %>
                                        <% if (cmd.exemptRoles && cmd.exemptRoles.length > 0) { %>
                                            <div>
                                                <strong style="color: rgba(255,255,255,0.6); font-size: 0.75rem;">Exempt Roles:</strong>
                                                <div style="display: flex; flex-wrap: wrap; gap: 0.25rem; margin-top: 0.25rem;">
                                                    <% cmd.exemptRoles.forEach(roleId => { %>
                                                        <span class="role-badge exempt" data-role-id="<%= roleId %>">✅ <%= roleId %></span>
                                                    <% }) %>
                                                </div>
                                            </div>
                                        <% } %>
                                    </div>
                                <% } %>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <div class="empty-state">
                            <div class="empty-state-icon">📦</div>
                            <div class="empty-state-text">No commands yet</div>
                            <div class="empty-state-subtext">Create your first custom command to get started</div>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
        <!-- Sticky Messages Tab -->
        <div id="tab-sticky" class="tab-content">
            <div class="sticky-section">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
                    <div>
                        <h2 style="color: #fff; margin: 0;">📌 Sticky Messages</h2>
                        <p style="color: rgba(255,255,255,0.6); margin: 0.5rem 0 0 0;">Pin important messages that auto-repost when pushed up</p>
                    </div>
                    <button onclick="openStickyModal()" class="btn btn-primary">➕ Create Sticky</button>
                </div>

                <div class="sticky-card">
                    <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 1rem;">
                        <div>
                            <span class="sticky-indicator">🔥 Active</span>
                            <h3 style="color: #fff; margin: 0.5rem 0;">Server Rules</h3>
                        </div>
                        <div style="display: flex; gap: 0.5rem;">
                            <button class="btn-icon" title="Edit">✏️</button>
                            <button class="btn-icon delete" title="Delete">🗑️</button>
                        </div>
                    </div>
                    <p style="color: rgba(255,255,255,0.7); margin-bottom: 1rem;">Welcome! Please read our server rules...</p>
                    <div style="display: flex; gap: 1rem; font-size: 0.85rem; color: rgba(255,255,255,0.5);">
                        <span>📍 Channel: #general</span>
                        <span>💬 Threshold: 10 messages</span>
                        <span>🔄 Reposts: 45</span>
                    </div>
                </div>

                <div class="empty-state" style="margin-top: 2rem;">
                    <div class="empty-state-icon">📌</div>
                    <div class="empty-state-text">No more sticky messages</div>
                    <div class="empty-state-subtext">Create sticky messages to keep important info visible</div>
                </div>
            </div>
        </div>

        <!-- Rulesets Tab (AutoMod Style) -->
        <div id="tab-rulesets" class="tab-content">
            <div class="ruleset-section">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
                    <div>
                        <h2 style="color: #fff; margin: 0;">🛡️ AutoMod Rulesets</h2>
                        <p style="color: rgba(255,255,255,0.6); margin: 0.5rem 0 0 0;">Automatic moderation rules based on message content and user behavior</p>
                    </div>
                    <button onclick="openRulesetModal()" class="btn btn-primary">➕ Create Ruleset</button>
                </div>

                <!-- Example Ruleset: Spam Detection -->
                <div class="ruleset-card">
                    <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 1rem;">
                        <div style="flex: 1;">
                            <div style="display: flex; align-items: center; gap: 0.75rem; margin-bottom: 0.5rem;">
                                <h3 style="color: #fff; margin: 0;">Anti-Spam</h3>
                                <span class="badge badge-enabled">Enabled</span>
                                <span class="badge" style="background: rgba(250,166,26,0.2); color: #faa61a;">High Priority</span>
                            </div>
                            <p style="color: rgba(255,255,255,0.6); margin: 0; font-size: 0.9rem;">Detects and punishes rapid message spam</p>
                        </div>
                        <div style="display: flex; gap: 0.5rem;">
                            <button class="btn-icon" title="Edit" onclick="editRuleset('spam')">✏️</button>
                            <button class="btn-icon toggle" title="Toggle">⏸️</button>
                            <button class="btn-icon delete" title="Delete">🗑️</button>
                        </div>
                    </div>
                    
                    <div style="background: rgba(0,0,0,0.2); padding: 1rem; border-radius: 6px; margin-bottom: 1rem;">
                        <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 1rem; margin-bottom: 0.75rem;">
                            <div>
                                <strong style="color: rgba(255,255,255,0.7); font-size: 0.75rem; display: block; margin-bottom: 0.25rem;">TRIGGER</strong>
                                <span style="color: #fff; font-size: 0.9rem;">5+ messages in 3 seconds</span>
                            </div>
                            <div>
                                <strong style="color: rgba(255,255,255,0.7); font-size: 0.75rem; display: block; margin-bottom: 0.25rem;">ACTION</strong>
                                <span style="color: #ed4245; font-size: 0.9rem;">Timeout 5m + Delete</span>
                            </div>
                        </div>
                        <div>
                            <strong style="color: rgba(255,255,255,0.7); font-size: 0.75rem; display: block; margin-bottom: 0.25rem;">EXCLUDED ROLES</strong>
                            <div style="display: flex; flex-wrap: wrap; gap: 0.25rem; margin-top: 0.5rem;">
                                <span class="role-badge exempt">Staff</span>
                                <span class="role-badge exempt">Moderator</span>
                            </div>
                        </div>
                    </div>
                    
                    <div style="display: flex; gap: 1rem; font-size: 0.85rem; color: rgba(255,255,255,0.5);">
                        <span>🎯 Triggered: 23 times</span>
                        <span>⏰ Last: 2h ago</span>
                    </div>
                </div>

                <!-- Example Ruleset: Link Filter -->
                <div class="ruleset-card">
                    <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 1rem;">
                        <div style="flex: 1;">
                            <div style="display: flex; align-items: center; gap: 0.75rem; margin-bottom: 0.5rem;">
                                <h3 style="color: #fff; margin: 0;">Link Blocker</h3>
                                <span class="badge badge-enabled">Enabled</span>
                                <span class="badge" style="background: rgba(237,66,69,0.2); color: #ed4245;">Medium Priority</span>
                            </div>
                            <p style="color: rgba(255,255,255,0.6); margin: 0; font-size: 0.9rem;">Blocks unauthorized links and invites</p>
                        </div>
                        <div style="display: flex; gap: 0.5rem;">
                            <button class="btn-icon" title="Edit">✏️</button>
                            <button class="btn-icon toggle" title="Toggle">⏸️</button>
                            <button class="btn-icon delete" title="Delete">🗑️</button>
                        </div>
                    </div>
                    
                    <div style="background: rgba(0,0,0,0.2); padding: 1rem; border-radius: 6px; margin-bottom: 1rem;">
                        <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 1rem; margin-bottom: 0.75rem;">
                            <div>
                                <strong style="color: rgba(255,255,255,0.7); font-size: 0.75rem; display: block; margin-bottom: 0.25rem;">TRIGGER</strong>
                                <span style="color: #fff; font-size: 0.9rem;">Contains discord.gg/ or http://</span>
                            </div>
                            <div>
                                <strong style="color: rgba(255,255,255,0.7); font-size: 0.75rem; display: block; margin-bottom: 0.25rem;">ACTION</strong>
                                <span style="color: #ed4245; font-size: 0.9rem;">Delete + Warn</span>
                            </div>
                        </div>
                        <div style="margin-bottom: 0.75rem;">
                            <strong style="color: rgba(255,255,255,0.7); font-size: 0.75rem; display: block; margin-bottom: 0.25rem;">WHITELISTED DOMAINS</strong>
                            <span style="color: rgba(255,255,255,0.8); font-size: 0.85rem;">youtube.com, twitter.com, imgur.com</span>
                        </div>
                        <div>
                            <strong style="color: rgba(255,255,255,0.7); font-size: 0.75rem; display: block; margin-bottom: 0.25rem;">EXCLUDED CHANNELS</strong>
                            <div style="display: flex; flex-wrap: wrap; gap: 0.25rem; margin-top: 0.5rem;">
                                <span class="badge" style="background: rgba(67,181,129,0.2); color: #43b581;">#media</span>
                                <span class="badge" style="background: rgba(67,181,129,0.2); color: #43b581;">#links</span>
                            </div>
                        </div>
                    </div>
                    
                    <div style="display: flex; gap: 1rem; font-size: 0.85rem; color: rgba(255,255,255,0.5);">
                        <span>🎯 Triggered: 156 times</span>
                        <span>⏰ Last: 15m ago</span>
                    </div>
                </div>

                <!-- Example Ruleset: Banned Words -->
                <div class="ruleset-card">
                    <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 1rem;">
                        <div style="flex: 1;">
                            <div style="display: flex; align-items: center; gap: 0.75rem; margin-bottom: 0.5rem;">
                                <h3 style="color: #fff; margin: 0;">Word Filter</h3>
                                <span class="badge badge-disabled">Disabled</span>
                                <span class="badge" style="background: rgba(67,181,129,0.2); color: #43b581;">Low Priority</span>
                            </div>
                            <p style="color: rgba(255,255,255,0.6); margin: 0; font-size: 0.9rem;">Filters inappropriate language</p>
                        </div>
                        <div style="display: flex; gap: 0.5rem;">
                            <button class="btn-icon" title="Edit">✏️</button>
                            <button class="btn-icon toggle" title="Toggle">▶️</button>
                            <button class="btn-icon delete" title="Delete">🗑️</button>
                        </div>
                    </div>
                    
                    <div style="background: rgba(0,0,0,0.2); padding: 1rem; border-radius: 6px; margin-bottom: 1rem; opacity: 0.6;">
                        <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 1rem;">
                            <div>
                                <strong style="color: rgba(255,255,255,0.7); font-size: 0.75rem; display: block; margin-bottom: 0.25rem;">TRIGGER</strong>
                                <span style="color: #fff; font-size: 0.9rem;">Contains 12 banned words</span>
                            </div>
                            <div>
                                <strong style="color: rgba(255,255,255,0.7); font-size: 0.75rem; display: block; margin-bottom: 0.25rem;">ACTION</strong>
                                <span style="color: #ed4245; font-size: 0.9rem;">Delete + Timeout 10m</span>
                            </div>
                        </div>
                    </div>
                    
                    <div style="display: flex; gap: 1rem; font-size: 0.85rem; color: rgba(255,255,255,0.5);">
                        <span>🎯 Triggered: 0 times</span>
                        <span>⏰ Currently disabled</span>
                    </div>
                </div>

                <div style="text-align: center; margin-top: 2rem; padding: 2rem; background: rgba(0,0,0,0.2); border-radius: 8px;">
                    <div style="font-size: 2rem; margin-bottom: 0.5rem;">🛡️</div>
                    <div style="color: rgba(255,255,255,0.8); font-weight: 600; margin-bottom: 0.5rem;">AutoMod Protection Active</div>
                    <div style="color: rgba(255,255,255,0.5); font-size: 0.9rem;">3 rulesets monitoring your server</div>
                </div>
            </div>
        </div>

        <!-- Bulk Actions Tab -->
        <div id="tab-bulk" class="tab-content">
            <div class="bulk-actions">
                <h2 style="color: #fff; margin-bottom: 1rem;">🔨 Bulk Command Actions</h2>
                <p style="color: rgba(255,255,255,0.6); margin-bottom: 2rem;">Perform actions on multiple commands at once</p>

                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1.5rem;">
                    <div style="background: rgba(0,0,0,0.3); padding: 1.5rem; border-radius: 8px; border: 1px solid rgba(255,255,255,0.1);">
                        <h3 style="color: #fff; margin-bottom: 1rem;">🔀 Enable/Disable All</h3>
                        <div style="display: flex; gap: 0.5rem;">
                            <button class="btn btn-success" onclick="bulkToggleCommands(true)">Enable All</button>
                            <button class="btn btn-secondary" onclick="bulkToggleCommands(false)">Disable All</button>
                        </div>
                    </div>

                    <div style="background: rgba(0,0,0,0.3); padding: 1.5rem; border-radius: 8px; border: 1px solid rgba(255,255,255,0.1);">
                        <h3 style="color: #fff; margin-bottom: 1rem;">📊 Category Actions</h3>
                        <select id="bulkCategory" class="form-control" style="margin-bottom: 0.5rem;">
                            <option value="">Select Category</option>
                            <option value="general">General</option>
                            <option value="fun">Fun</option>
                            <option value="moderation">Moderation</option>
                            <option value="info">Info</option>
                        </select>
                        <button class="btn btn-primary" onclick="bulkCategoryAction()">Apply to Category</button>
                    </div>

                    <div style="background: rgba(0,0,0,0.3); padding: 1.5rem; border-radius: 8px; border: 1px solid rgba(255,255,255,0.1);">
                        <h3 style="color: #fff; margin-bottom: 1rem;">🗑️ Cleanup</h3>
                        <button class="btn btn-danger" onclick="if(confirm('Delete all disabled commands?')) bulkDelete()">Delete Disabled Commands</button>
                    </div>
                </div>

                <div class="channel-response-section" style="margin-top: 2rem;">
                    <h3 style="color: #fff; margin-bottom: 1rem;">📍 Channel-Specific Responses</h3>
                    <p style="color: rgba(255,255,255,0.7); margin-bottom: 1rem;">Set different responses for commands in specific channels</p>
                    
                    <div class="response-channel-grid">
                        <div style="background: rgba(0,0,0,0.2); padding: 1rem; border-radius: 8px;">
                            <strong style="color: #fff; display: block; margin-bottom: 0.5rem;">#general</strong>
                            <span style="color: rgba(255,255,255,0.6); font-size: 0.85rem;">3 custom responses</span>
                        </div>
                        <div style="background: rgba(0,0,0,0.2); padding: 1rem; border-radius: 8px;">
                            <strong style="color: #fff; display: block; margin-bottom: 0.5rem;">#announcements</strong>
                            <span style="color: rgba(255,255,255,0.6); font-size: 0.85rem;">1 custom response</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Protection Tab -->
        <div id="tab-protection" class="tab-content">
            <div style="background: linear-gradient(135deg, rgba(30,33,40,0.95) 0%, rgba(20,23,28,0.95) 100%); border: 1px solid rgba(67,181,129,0.3); border-radius: 12px; padding: 2rem;">
                <h2 style="color: #fff; margin-bottom: 1rem;">🛡️ Command Protection</h2>
                <p style="color: rgba(255,255,255,0.6); margin-bottom: 2rem;">Configure rate limiting and abuse prevention</p>

                <div style="display: grid; gap: 1.5rem;">
                    <div style="background: rgba(0,0,0,0.3); padding: 1.5rem; border-radius: 8px; border: 1px solid rgba(255,255,255,0.1);">
                        <h3 style="color: #fff; margin-bottom: 1rem;">⏱️ Rate Limiting</h3>
                        <div class="form-group">
                            <label>Commands per minute (per user)</label>
                            <input type="number" value="5" class="form-control">
                        </div>
                        <div class="form-group">
                            <label>Cooldown between uses (seconds)</label>
                            <input type="number" value="3" class="form-control">
                        </div>
                        <button class="btn btn-primary">💾 Save Settings</button>
                    </div>

                    <div style="background: rgba(0,0,0,0.3); padding: 1.5rem; border-radius: 8px; border: 1px solid rgba(255,255,255,0.1);">
                        <h3 style="color: #fff; margin-bottom: 1rem;">🚫 Spam Prevention</h3>
                        <label style="color: rgba(255,255,255,0.8); display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.75rem;">
                            <input type="checkbox" checked> Detect command spam
                        </label>
                        <label style="color: rgba(255,255,255,0.8); display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.75rem;">
                            <input type="checkbox" checked> Auto-timeout spammers
                        </label>
                        <label style="color: rgba(255,255,255,0.8); display: flex; align-items: center; gap: 0.5rem;">
                            <input type="checkbox"> Log abuse attempts
                        </label>
                    </div>

                    <div style="background: rgba(0,0,0,0.3); padding: 1.5rem; border-radius: 8px; border: 1px solid rgba(255,255,255,0.1);">
                        <h3 style="color: #fff; margin-bottom: 1rem;">📊 Usage Statistics</h3>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem;">
                            <div style="text-align: center;">
                                <div style="font-size: 2rem; color: #5865f2; font-weight: bold;">1,247</div>
                                <div style="color: rgba(255,255,255,0.6); font-size: 0.85rem;">Total Uses</div>
                            </div>
                            <div style="text-align: center;">
                                <div style="font-size: 2rem; color: #43b581; font-weight: bold;">23</div>
                                <div style="color: rgba(255,255,255,0.6); font-size: 0.85rem;">Active Commands</div>
                            </div>
                            <div style="text-align: center;">
                                <div style="font-size: 2rem; color: #ed4245; font-weight: bold;">8</div>
                                <div style="color: rgba(255,255,255,0.6); font-size: 0.85rem;">Blocked Attempts</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Sticky Message Modal -->
<div id="stickyModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 style="color: #fff; margin: 0;">📌 Create Sticky Message</h2>
            <span class="close" onclick="closeStickyModal()">&times;</span>
        </div>
        <form id="stickyMessageForm">
            <div class="form-group">
                <label>Channel *</label>
                <select name="channelId" id="stickyChannelId" required>
                    <option value="">Select Channel...</option>
                    <!-- Channels will be populated by JS -->
                </select>
            </div>
            
            <div class="form-group">
                <label>Message *</label>
                <textarea name="message" id="stickyMessage" rows="6" required placeholder="This message will stay at the bottom of the channel..."></textarea>
            </div>
            
            <div class="form-group">
                <label>Repost Threshold</label>
                <input type="number" name="threshold" id="stickyThreshold" value="10" min="1" max="50">
                <small>Repost after this many messages</small>
            </div>
            
            <div class="form-group">
                <label><input type="checkbox" name="enabled" id="stickyEnabled" checked> Enable immediately</label>
            </div>
            
            <div style="display: flex; gap: 1rem; margin-top: 2rem; padding-top: 1.5rem; border-top: 1px solid rgba(255,255,255,0.1);">
                <button type="button" onclick="closeStickyModal()" class="btn btn-secondary">Cancel</button>
                <button type="button" onclick="submitStickyForm()" class="btn btn-primary">💾 Create Sticky</button>
            </div>
        </form>
    </div>
</div>

    <!-- Ruleset Modal -->
    <div id="rulesetModal" class="modal">
        <div class="modal-content" style="max-width: 900px;">
            <div class="modal-header">
                <h2 style="color: #fff; margin: 0;">🛡️ Create AutoMod Ruleset</h2>
                <span class="close" onclick="closeRulesetModal()">&times;</span>
            </div>
            <form onsubmit="saveRuleset(event)">
                <div class="form-row">
                    <div class="form-group">
                        <label>Ruleset Name *</label>
                        <input type="text" name="name" required placeholder="Anti-Spam">
                    </div>
                    <div class="form-group">
                        <label>Priority</label>
                        <select name="priority">
                            <option value="high">🔴 High</option>
                            <option value="medium" selected>🟡 Medium</option>
                            <option value="low">🟢 Low</option>
                        </select>
                    </div>
                </div>
                
                <div class="form-group">
                    <label>Description</label>
                    <textarea name="description" rows="2" placeholder="What does this ruleset do?"></textarea>
                </div>
                
                <div style="border-top: 1px solid rgba(255,255,255,0.1); margin: 1.5rem 0; padding-top: 1.5rem;">
                    <h3 style="color: #fff; margin-bottom: 1rem;">🎯 Trigger Conditions</h3>
                    
                    <div class="form-group">
                        <label>Trigger Type *</label>
                        <select name="triggerType" id="rulesetTriggerType" onchange="updateRulesetTriggerFields()" required>
                            <option value="">Select trigger type...</option>
                            <option value="spam">💬 Spam Detection (rapid messages)</option>
                            <option value="links">🔗 Link Filter (URLs & invites)</option>
                            <option value="words">🚫 Banned Words</option>
                            <option value="mentions">👥 Excessive Mentions</option>
                            <option value="caps">🔠 Caps Lock Abuse</option>
                            <option value="attachments">📎 Attachment Limits</option>
                        </select>
                    </div>
                    
                    <div id="triggerConfigFields" style="background: rgba(0,0,0,0.2); padding: 1rem; border-radius: 8px; margin-top: 1rem;">
                        <p style="color: rgba(255,255,255,0.6);">Select a trigger type to configure</p>
                    </div>
                </div>
                
                <div style="border-top: 1px solid rgba(255,255,255,0.1); margin: 1.5rem 0; padding-top: 1.5rem;">
                    <h3 style="color: #fff; margin-bottom: 1rem;">⚡ Actions</h3>
                    
                    <div class="form-group">
                        <label>Action Type *</label>
                        <select name="actionType" id="rulesetActionType" onchange="updateRulesetActionFields()" required>
                            <option value="">Select action...</option>
                            <option value="delete">🗑️ Delete Message</option>
                            <option value="warn">⚠️ Warn User</option>
                            <option value="timeout">⏰ Timeout User</option>
                            <option value="kick">👢 Kick User</option>
                            <option value="ban">🔨 Ban User</option>
                        </select>
                    </div>
                    
                    <div id="actionConfigFields" style="background: rgba(0,0,0,0.2); padding: 1rem; border-radius: 8px; margin-top: 1rem;">
                        <p style="color: rgba(255,255,255,0.6);">Select an action type to configure</p>
                    </div>
                </div>
                
                <div style="border-top: 1px solid rgba(255,255,255,0.1); margin: 1.5rem 0; padding-top: 1.5rem;">
                    <h3 style="color: #fff; margin-bottom: 1rem;">🛡️ Exclusions</h3>
                    
                    <div class="form-group">
                        <label>Excluded Roles (comma-separated IDs)</label>
                        <input type="text" name="excludedRoles" placeholder="123456789, 987654321">
                        <small>Users with these roles will be exempt</small>
                    </div>
                    
                    <div class="form-group">
                        <label>Excluded Channels (comma-separated IDs)</label>
                        <input type="text" name="excludedChannels" placeholder="123456789, 987654321">
                        <small>Rule won't apply in these channels</small>
                    </div>
                </div>
                
                <div style="display: flex; gap: 1rem; margin-top: 2rem; padding-top: 1.5rem; border-top: 1px solid rgba(255,255,255,0.1);">
                    <button type="button" onclick="closeRulesetModal()" class="btn btn-secondary">Cancel</button>
                    <button type="submit" class="btn btn-primary">💾 Create Ruleset</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Edit Command Modal -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 style="color: #fff; margin: 0;">✏️ Edit Command</h2>
                <span class="close" onclick="closeEditModal()">&times;</span>
            </div>
            <form method="POST" action="/commands/update" id="editCommandForm">
                <input type="hidden" name="commandId" id="editCommandId">
                
                <div class="form-row">
                    <div class="form-group">
                        <label>Command Name</label>
                        <input type="text" name="name" id="editName" required>
                    </div>
                    <div class="form-group">
                        <label>Category</label>
                        <select name="category" id="editCategory">
                            <option value="general">General</option>
                            <option value="fun">Fun</option>
                            <option value="moderation">Moderation</option>
                            <option value="info">Info</option>
                            <option value="utility">Utility</option>
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <label>Trigger Text</label>
                    <input type="text" name="trigger" id="editTrigger" required>
                </div>

                <div class="form-group">
                    <label>Response Content</label>
                    <textarea name="response" id="editResponse" rows="6"></textarea>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label>Response Type</label>
                        <select name="responseType" id="editResponseType">
                            <option value="text">Text Message</option>
                            <option value="embed">Embed</option>
                            <option value="react">Reaction</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>
                            <input type="checkbox" name="enabled" id="editEnabled"> Enabled
                        </label>
                    </div>
                </div>

                <div style="display: flex; gap: 1rem; margin-top: 2rem; padding-top: 1.5rem; border-top: 1px solid rgba(255,255,255,0.1);">
                    <button type="button" onclick="closeEditModal()" class="btn btn-secondary">Cancel</button>
                    <button type="submit" class="btn btn-primary">💾 Save Changes</button>
                </div>
            </form>
        </div>
    </div>
    <script>
        // Global roles data
        const rolesData = <%- JSON.stringify(roles || []) %>;
        const selectedRequiredRoles = new Set();
        const selectedExemptRoles = new Set();

        // Initialize role dropdowns
        function initializeRoleDropdowns() {
            const requiredDropdown = document.getElementById('requiredRoleDropdown');
            const exemptDropdown = document.getElementById('exemptRoleDropdown');
            
            rolesData.forEach(role => {
                const requiredOption = createRoleOption(role, 'required');
                const exemptOption = createRoleOption(role, 'exempt');
                requiredDropdown.appendChild(requiredOption);
                exemptDropdown.appendChild(exemptOption);
            });
        }

        function createRoleOption(role, type) {
            const option = document.createElement('div');
            option.className = 'role-option';
            option.textContent = role.name;
            option.onclick = () => toggleRole(role.id, role.name, type);
            return option;
        }

        function toggleRoleDropdown(type) {
            const dropdown = document.getElementById(`${type}RoleDropdown`);
            dropdown.classList.toggle('active');
            
            // Close other dropdown
            const otherType = type === 'required' ? 'exempt' : 'required';
            document.getElementById(`${otherType}RoleDropdown`).classList.remove('active');
        }

        function toggleRole(roleId, roleName, type) {
            const selectedSet = type === 'required' ? selectedRequiredRoles : selectedExemptRoles;
            
            if (selectedSet.has(roleId)) {
                selectedSet.delete(roleId);
            } else {
                selectedSet.add(roleId);
            }
            
            updateRoleTags(type);
            updateRoleInput(type);
        }

        function updateRoleTags(type) {
            const tagsContainer = document.getElementById(`${type}RoleTags`);
            const selectedSet = type === 'required' ? selectedRequiredRoles : selectedExemptRoles;
            
            if (selectedSet.size === 0) {
                tagsContainer.innerHTML = '<span style="color: rgba(255,255,255,0.5);">Click to select roles...</span>';
                return;
            }
            
            tagsContainer.innerHTML = '';
            selectedSet.forEach(roleId => {
                const role = rolesData.find(r => r.id === roleId);
                if (role) {
                    const tag = document.createElement('div');
                    tag.className = 'role-tag';
                    tag.innerHTML = `
                        ${role.name}
                        <span class="role-tag-remove" onclick="event.stopPropagation(); removeRole('${roleId}', '${type}')">×</span>
                    `;
                    tagsContainer.appendChild(tag);
                }
            });
        }

        function removeRole(roleId, type) {
            const selectedSet = type === 'required' ? selectedRequiredRoles : selectedExemptRoles;
            selectedSet.delete(roleId);
            updateRoleTags(type);
            updateRoleInput(type);
        }

        function updateRoleInput(type) {
            const selectedSet = type === 'required' ? selectedRequiredRoles : selectedExemptRoles;
            const input = document.getElementById(`${type}RolesInput`);
            input.value = Array.from(selectedSet).join(',');
        }

        // Close dropdowns when clicking outside
        document.addEventListener('click', function(event) {
            if (!event.target.closest('.role-selector')) {
                document.querySelectorAll('.role-dropdown').forEach(dropdown => {
                    dropdown.classList.remove('active');
                });
            }
        });

        // Tab switching
        function switchMainTab(tabName) {
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.tab-nav-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            document.getElementById(`tab-${tabName}`).classList.add('active');
            event.target.classList.add('active');
        }

        // Command filtering
        function filterCommands(category) {
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            event.target.classList.add('active');
            
            const cards = document.querySelectorAll('.command-card');
            cards.forEach(card => {
                if (category === 'all' || card.dataset.category === category) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        }

        // Toggle create form
        function toggleCreateForm() {
            const section = document.getElementById('createCommandSection');
            section.style.display = section.style.display === 'none' ? 'block' : 'none';
        }

        // Toggle command enabled/disabled
        async function toggleCommand(commandId, type) {
            try {
                const response = await fetch(`/commands/toggle/${commandId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ type })
                });
                
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Failed to toggle command');
                }
            } catch (error) {
                console.error('Error toggling command:', error);
                alert('Error toggling command');
            }
        }

        // Edit command modal
        function editCommand(commandId) {
            // Fetch command data and populate modal
            fetch(`/commands/get/${commandId}`)
                .then(res => res.json())
                .then(data => {
                    document.getElementById('editCommandId').value = data._id;
                    document.getElementById('editName').value = data.name;
                    document.getElementById('editCategory').value = data.category || 'general';
                    document.getElementById('editTrigger').value = Array.isArray(data.trigger) ? data.trigger.join(', ') : data.trigger;
                    document.getElementById('editResponse').value = data.response || '';
                    document.getElementById('editResponseType').value = data.responseType || 'text';
                    document.getElementById('editEnabled').checked = data.enabled;
                    
                    document.getElementById('editModal').style.display = 'block';
                })
                .catch(error => {
                    console.error('Error loading command:', error);
                    alert('Failed to load command data');
                });
        }

        function closeEditModal() {
            document.getElementById('editModal').style.display = 'none';
        }

        // Modal close on outside click
        window.onclick = function(event) {
            const modal = document.getElementById('editModal');
            if (event.target === modal) {
                closeEditModal();
            }
        }

        // Bulk actions
        async function bulkToggleCommands(enable) {
            if (!confirm(`Are you sure you want to ${enable ? 'enable' : 'disable'} all commands?`)) return;
            
            try {
                const response = await fetch('/commands/bulk/toggle', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ enable })
                });
                
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Failed to update commands');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error updating commands');
            }
        }

        function bulkCategoryAction() {
            const category = document.getElementById('bulkCategory').value;
            if (!category) {
                alert('Please select a category');
                return;
            }
            alert(`Bulk action for ${category} category - feature coming soon!`);
        }

        async function bulkDelete() {
            try {
                const response = await fetch('/commands/bulk/delete-disabled', {
                    method: 'POST'
                });
                
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Failed to delete commands');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error deleting commands');
            }
        }

        // Copy functionality
        function copyRuleset(button) {
            const content = button.parentElement.querySelector('pre').textContent;
            navigator.clipboard.writeText(content).then(() => {
                const originalText = button.textContent;
                button.textContent = '✅ Copied!';
                setTimeout(() => {
                    button.textContent = originalText;
                }, 2000);
            });
        }

        // Modal functions for sticky and rulesets
        async function openStickyModal() {
            document.getElementById('stickyModal').style.display = 'block';
            await loadChannelsForSticky();
        }

        function closeStickyModal() {
            document.getElementById('stickyModal').style.display = 'none';
        }

        async function loadChannelsForSticky() {
            try {
                const response = await fetch('/api/channels');
                const data = await response.json();
                
                if (data.success && data.channels) {
                    const select = document.querySelector('#stickyModal select[name="channelId"]');
                    select.innerHTML = '<option value="">Select Channel...</option>';
                    
                    data.channels.forEach(channel => {
                        const option = document.createElement('option');
                        option.value = channel.id;
                        option.textContent = `#${channel.name}`;
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading channels:', error);
            }
        }

        function openRulesetModal() {
            document.getElementById('rulesetModal').style.display = 'block';
            updateRulesetTriggerFields();
            updateRulesetActionFields();
        }

        function closeRulesetModal() {
            document.getElementById('rulesetModal').style.display = 'none';
        }

        function updateRulesetTriggerFields() {
            const triggerType = document.getElementById('rulesetTriggerType').value;
            const container = document.getElementById('triggerConfigFields');
            
            let html = '';
            
            switch(triggerType) {
                case 'spam':
                    html = `
                        <div class="form-group">
                            <label>Message Count</label>
                            <input type="number" name="messageCount" value="5" min="2" max="20">
                            <small>Number of messages</small>
                        </div>
                        <div class="form-group">
                            <label>Time Window (seconds)</label>
                            <input type="number" name="timeWindow" value="3" min="1" max="60">
                            <small>Within this time period</small>
                        </div>
                    `;
                    break;
                    
                case 'links':
                    html = `
                        <div class="form-group">
                            <label><input type="checkbox" name="blockDiscordInvites" checked> Block Discord Invites</label>
                        </div>
                        <div class="form-group">
                            <label><input type="checkbox" name="blockAllUrls"> Block All URLs</label>
                        </div>
                        <div class="form-group">
                            <label>Whitelisted Domains (comma-separated)</label>
                            <input type="text" name="whitelistedDomains" placeholder="youtube.com, twitter.com">
                            <small>These domains will be allowed</small>
                        </div>
                    `;
                    break;
                    
                case 'words':
                    html = `
                        <div class="form-group">
                            <label>Banned Words (one per line)</label>
                            <textarea name="bannedWords" rows="5" placeholder="word1&#10;word2&#10;word3"></textarea>
                        </div>
                        <div class="form-group">
                            <label><input type="checkbox" name="caseSensitive"> Case Sensitive</label>
                        </div>
                        <div class="form-group">
                            <label><input type="checkbox" name="wildcard" checked> Use Wildcard Matching</label>
                            <small>*word* matches anywhere in message</small>
                        </div>
                    `;
                    break;
                    
                case 'mentions':
                    html = `
                        <div class="form-group">
                            <label>Max Mentions</label>
                            <input type="number" name="maxMentions" value="5" min="1" max="20">
                            <small>Maximum user/role mentions per message</small>
                        </div>
                        <div class="form-group">
                            <label><input type="checkbox" name="includeBotMentions"> Include Bot Mentions</label>
                        </div>
                    `;
                    break;
                    
                case 'caps':
                    html = `
                        <div class="form-group">
                            <label>Caps Percentage</label>
                            <input type="number" name="capsPercentage" value="70" min="50" max="100">
                            <small>% of message in CAPS</small>
                        </div>
                        <div class="form-group">
                            <label>Minimum Length</label>
                            <input type="number" name="minLength" value="10" min="5" max="50">
                            <small>Minimum message length to check</small>
                        </div>
                    `;
                    break;
                    
                case 'attachments':
                    html = `
                        <div class="form-group">
                            <label>Max Attachments</label>
                            <input type="number" name="maxAttachments" value="3" min="1" max="10">
                            <small>Maximum attachments per message</small>
                        </div>
                        <div class="form-group">
                            <label>Blocked File Types (comma-separated)</label>
                            <input type="text" name="blockedTypes" placeholder=".exe, .bat, .cmd">
                        </div>
                    `;
                    break;
                    
                default:
                    html = '<p style="color: rgba(255,255,255,0.6);">Select a trigger type</p>';
            }
            
            container.innerHTML = html;
        }

        function updateRulesetActionFields() {
            const actionType = document.getElementById('rulesetActionType').value;
            const container = document.getElementById('actionConfigFields');
            
            let html = '';
            
            switch(actionType) {
                case 'delete':
                    html = `
                        <div class="form-group">
                            <label><input type="checkbox" name="notifyUser" checked> Notify User</label>
                            <small>Send a DM explaining why message was deleted</small>
                        </div>
                        <div class="form-group">
                            <label>Custom Message</label>
                            <textarea name="customMessage" rows="2" placeholder="Your message violated our rules..."></textarea>
                        </div>
                    `;
                    break;
                    
                case 'warn':
                    html = `
                        <div class="form-group">
                            <label>Warning Message</label>
                            <textarea name="warnMessage" rows="3" placeholder="You have been warned for..."></textarea>
                        </div>
                        <div class="form-group">
                            <label><input type="checkbox" name="deleteMessage" checked> Also Delete Message</label>
                        </div>
                    `;
                    break;
                    
                case 'timeout':
                    html = `
                        <div class="form-group">
                            <label>Timeout Duration</label>
                            <select name="timeoutDuration">
                                <option value="60">1 minute</option>
                                <option value="300" selected>5 minutes</option>
                                <option value="600">10 minutes</option>
                                <option value="1800">30 minutes</option>
                                <option value="3600">1 hour</option>
                                <option value="86400">24 hours</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label><input type="checkbox" name="deleteMessage" checked> Delete Message</label>
                        </div>
                        <div class="form-group">
                            <label>Reason (shown to user)</label>
                            <textarea name="timeoutReason" rows="2" placeholder="You have been timed out for..."></textarea>
                        </div>
                    `;
                    break;
                    
                case 'kick':
                    html = `
                        <div class="form-group">
                            <label>Kick Reason</label>
                            <textarea name="kickReason" rows="2" placeholder="Kicked for violating rules"></textarea>
                        </div>
                        <div class="form-group">
                            <label><input type="checkbox" name="notifyBeforeKick" checked> DM User Before Kick</label>
                        </div>
                    `;
                    break;
                    
                case 'ban':
                    html = `
                        <div class="form-group">
                            <label>Ban Reason</label>
                            <textarea name="banReason" rows="2" placeholder="Banned for violating rules"></textarea>
                        </div>
                        <div class="form-group">
                            <label>Delete Message History</label>
                            <select name="deleteMessageDays">
                                <option value="0">Don't delete any</option>
                                <option value="1" selected>Previous 24 hours</option>
                                <option value="7">Previous 7 days</option>
                            </select>
                        </div>
                    `;
                    break;
                    
                default:
                    html = '<p style="color: rgba(255,255,255,0.6);">Select an action type</p>';
            }
            
            container.innerHTML = html;
        }

        async function saveRuleset(event) {
            event.preventDefault();
            
            const form = event.target;
            const formData = new FormData(form);
            
            // Build trigger config based on type
            const triggerType = formData.get('triggerType');
            const triggerConfig = {};
            
            switch(triggerType) {
                case 'spam':
                    triggerConfig.messageCount = parseInt(formData.get('messageCount'));
                    triggerConfig.timeWindow = parseInt(formData.get('timeWindow'));
                    break;
                case 'links':
                    triggerConfig.blockDiscordInvites = formData.get('blockDiscordInvites') === 'on';
                    triggerConfig.blockAllUrls = formData.get('blockAllUrls') === 'on';
                    break;
                case 'words':
                    triggerConfig.bannedWords = formData.get('bannedWords').split('\n').filter(w => w.trim());
                    triggerConfig.caseSensitive = formData.get('caseSensitive') === 'on';
                    triggerConfig.wildcard = formData.get('wildcard') === 'on';
                    break;
                case 'mentions':
                    triggerConfig.maxMentions = parseInt(formData.get('maxMentions'));
                    triggerConfig.includeBotMentions = formData.get('includeBotMentions') === 'on';
                    break;
                case 'caps':
                    triggerConfig.capsPercentage = parseInt(formData.get('capsPercentage'));
                    triggerConfig.minLength = parseInt(formData.get('minLength'));
                    break;
                case 'attachments':
                    triggerConfig.maxAttachments = parseInt(formData.get('maxAttachments'));
                    triggerConfig.blockedTypes = formData.get('blockedTypes')?.split(',').map(t => t.trim());
                    break;
            }
            
            // Build action config
            const actionType = formData.get('actionType');
            const actionConfig = {};
            
            switch(actionType) {
                case 'delete':
                    actionConfig.notifyUser = formData.get('notifyUser') === 'on';
                    actionConfig.customMessage = formData.get('customMessage');
                    break;
                case 'warn':
                    actionConfig.warnMessage = formData.get('warnMessage');
                    actionConfig.deleteMessage = formData.get('deleteMessage') === 'on';
                    break;
                case 'timeout':
                    actionConfig.duration = parseInt(formData.get('timeoutDuration'));
                    actionConfig.deleteMessage = formData.get('deleteMessage') === 'on';
                    actionConfig.reason = formData.get('timeoutReason');
                    break;
                case 'kick':
                    actionConfig.reason = formData.get('kickReason');
                    actionConfig.notifyBeforeKick = formData.get('notifyBeforeKick') === 'on';
                    break;
                case 'ban':
                    actionConfig.reason = formData.get('banReason');
                    actionConfig.deleteMessageDays = parseInt(formData.get('deleteMessageDays'));
                    break;
            }
            
            const data = {
                name: formData.get('name'),
                description: formData.get('description'),
                triggerType: triggerType,
                triggerConfig: triggerConfig,
                actionType: actionType,
                actionConfig: actionConfig,
                priority: formData.get('priority'),
                excludedRoles: formData.get('excludedRoles')?.split(',').filter(r => r.trim()) || [],
                excludedChannels: formData.get('excludedChannels')?.split(',').filter(c => c.trim()) || [],
                whitelistedDomains: formData.get('whitelistedDomains')?.split(',').map(d => d.trim()) || []
            };
            
            try {
                const response = await fetch('/commands/ruleset/create', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    closeRulesetModal();
                    location.reload();
                } else {
                    alert('Error: ' + result.error);
                }
            } catch (error) {
                console.error('Error saving ruleset:', error);
                alert('Failed to save ruleset');
            }
        }

        async function submitStickyForm() {
    console.log('🟢 submitStickyForm called');
    
    const form = document.getElementById('stickyMessageForm');
    const formData = new FormData(form);
    
    const data = {
        channelId: formData.get('channelId'),
        message: formData.get('message'),
        threshold: parseInt(formData.get('threshold')) || 10,
        enabled: formData.get('enabled') === 'on'
    };
    
    console.log('📝 Form data collected:', data);
    
    if (!data.channelId) {
        console.error('❌ No channel selected');
        alert('Please select a channel');
        return;
    }
    
    if (!data.message || data.message.trim() === '') {
        console.error('❌ No message provided');
        alert('Please enter a message');
        return;
    }
    
    console.log('🚀 Sending request to /commands/sticky/create');
    
    try {
        const response = await fetch('/commands/sticky/create', {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(data)
        });
        
        console.log('📡 Response status:', response.status);
        console.log('📡 Response ok:', response.ok);
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error('❌ HTTP error:', response.status, errorText);
            alert(`Error: Server returned ${response.status}`);
            return;
        }
        
        const result = await response.json();
        console.log('📦 Response data:', result);
        
        if (result.success) {
            alert('✅ Sticky message created successfully!');
            closeStickyModal();
            setTimeout(() => location.reload(), 500);
        } else {
            console.error('❌ Server returned error:', result.error);
            alert('❌ Error: ' + (result.error || 'Unknown error'));
        }
    } catch (error) {
        console.error('💥 Fetch error:', error);
        alert('💥 Failed to save sticky message: ' + error.message);
    }
}

        // Load role names from IDs
        function loadRoleNames() {
            document.querySelectorAll('.role-badge[data-role-id]').forEach(badge => {
                const roleId = badge.dataset.roleId;
                const role = rolesData.find(r => r.id === roleId);
                if (role) {
                    const icon = badge.classList.contains('exempt') ? '✅' : '🔒';
                    badge.textContent = `${icon} ${role.name}`;
                }
            });
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            initializeRoleDropdowns();
            loadRoleNames();
        });
    </script>
</body>
</html>