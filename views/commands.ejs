<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Custom Commands - Discord Logger</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <%- include('partials/navbar') %>
    
    <div class="container">
        <div class="commands-header">
            <h1>‚öôÔ∏è Custom Commands</h1>
            <button onclick="toggleCreateForm()" class="btn btn-primary btn-large">
                + Create New Command
            </button>
        </div>

        <!-- Quick Execute Command -->
        <div class="section">
            <h2 class="section-title">‚ö° Quick Execute</h2>
            <form onsubmit="executeCommand(event)" class="quick-execute">
                <div class="form-group">
                    <label>Channel</label>
                    <select id="channelSelect" required>
                        <option value="">Select Channel...</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Command</label>
                    <input type="text" id="commandInput" placeholder="Enter command..." required>
                </div>
                <button type="submit" class="btn btn-primary" style="margin-top: 22px;">Execute</button>
            </form>
            <div id="executeResult"></div>
        </div>

        <!-- Create Command Form (Hidden by default) -->
        <div class="section" id="createCommandSection" style="display: none;">
            <h2 class="section-title">üìù Create New Command</h2>
            <form method="POST" action="/commands/create">
                <div class="form-grid">
                    <!-- Left Column -->
                    <div>
                        <div class="form-group">
                            <label>Command Name *</label>
                            <input type="text" name="name" placeholder="My Command" required>
                        </div>
                        
                        <div class="form-group">
                            <label>Category</label>
                            <select name="category">
                                <option value="general">General</option>
                                <option value="fun">Fun</option>
                                <option value="moderation">Moderation</option>
                                <option value="info">Info</option>
                                <option value="utility">Utility</option>
                                <option value="custom">Custom</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>Description</label>
                            <textarea name="description" rows="2" placeholder="What does this command do?"></textarea>
                        </div>

                        <div class="form-group">
                            <label>Trigger Type</label>
                            <select name="triggerType">
                                <option value="command">Command (!hello)</option>
                                <option value="exact">Exact Match</option>
                                <option value="contains">Contains Text</option>
                                <option value="startswith">Starts With</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>Trigger Text *</label>
                            <input type="text" name="trigger" placeholder="hello, hi, hey" required>
                            <small>Separate multiple triggers with commas</small>
                        </div>
                    </div>

                    <!-- Right Column -->
                    <div>
                        <div class="form-group">
                            <label>Response Type</label>
                            <select name="responseType">
                                <option value="text">Text Message</option>
                                <option value="embed">Embed</option>
                                <option value="react">Reaction Only</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>Message Content</label>
                            <textarea name="response" rows="4" placeholder="Hello {user}! Welcome to {server}"></textarea>
                            <small>Variables: {user}, {channel}, {server}, {membercount}</small>
                        </div>

                        <div class="form-group">
                            <label>
                                <input type="checkbox" name="enabled" checked>
                                Enabled
                            </label>
                        </div>

                        <div class="form-group">
                            <label>
                                <input type="checkbox" name="deleteTrigger">
                                Delete Trigger Message
                            </label>
                        </div>
                    </div>
                </div>
                
                <div class="form-actions">
                    <button type="button" onclick="toggleCreateForm()" class="btn btn-secondary">Cancel</button>
                    <button type="submit" class="btn btn-primary btn-large">üíæ Create Command</button>
                </div>
            </form>
        </div>

        <!-- Existing Commands -->
        <div class="section">
            <h2 class="section-title">üìã Command List</h2>
            
            <div class="tabs">
                <button class="tab active" onclick="filterCommands('all')">All</button>
                <button class="tab" onclick="filterCommands('general')">General</button>
                <button class="tab" onclick="filterCommands('fun')">Fun</button>
                <button class="tab" onclick="filterCommands('moderation')">Moderation</button>
                <button class="tab" onclick="filterCommands('info')">Info</button>
                <button class="tab" onclick="filterCommands('utility')">Utility</button>
                <button class="tab" onclick="filterCommands('custom')">Custom</button>
            </div>

            <div class="commands-table">
                <% if (commands && commands.length > 0) { %>
                    <% commands.forEach(cmd => { %>
                        <div class="command-card <%= cmd.enabled ? '' : 'disabled' %>" data-category="<%= cmd.category || 'general' %>">
                            <div class="command-header">
                                <div>
                                    <h3><%= cmd.name %></h3>
                                    <span class="badge badge-<%= cmd.category || 'general' %>"><%= cmd.category || 'general' %></span>
                                    <span class="badge <%= cmd.enabled ? 'badge-enabled' : 'badge-disabled' %>">
                                        <%= cmd.enabled ? 'Enabled' : 'Disabled' %>
                                    </span>
                                </div>
                                <div class="command-actions">
                                    <button class="btn-icon" onclick="toggleCommand('<%= cmd._id %>')" title="Toggle Enable/Disable">
                                        <%= cmd.enabled ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è' %>
                                    </button>
                                    <button class="btn-icon delete" onclick="if(confirm('Delete this command?')) { window.location.href='/commands/delete/<%= cmd._id %>' }" title="Delete Command">
                                        üóëÔ∏è
                                    </button>
                                </div>
                            </div>
                            
                            <% if (cmd.description) { %>
                                <p class="command-desc"><%= cmd.description %></p>
                            <% } %>
                            
                            <div class="command-meta">
                                <div class="meta-item">
                                    <strong>Trigger:</strong> 
                                    <%= cmd.triggerType === 'command' ? '!' : '' %><%= Array.isArray(cmd.trigger) ? cmd.trigger.join(', ') : cmd.trigger %>
                                </div>
                                <div class="meta-item">
                                    <strong>Type:</strong> <%= cmd.responseType %>
                                </div>
                                <div class="meta-item">
                                    <strong>Uses:</strong> <%= cmd.uses || 0 %>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="empty-state">
                        <div class="empty-state-icon">üì¶</div>
                        <div class="empty-state-text">No commands yet</div>
                        <div class="empty-state-subtext">Create your first custom command to get started</div>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <script>
        // Toggle create form
        function toggleCreateForm() {
            const form = document.getElementById('createCommandSection');
            form.style.display = form.style.display === 'none' ? 'block' : 'none';
        }

        // Filter commands by category
        function filterCommands(category) {
            const commands = document.querySelectorAll('.command-card');
            const tabs = document.querySelectorAll('.tab');
            
            tabs.forEach(tab => tab.classList.remove('active'));
            event.target.classList.add('active');
            
            commands.forEach(cmd => {
                if (category === 'all' || cmd.dataset.category === category) {
                    cmd.style.display = 'block';
                } else {
                    cmd.style.display = 'none';
                }
            });
        }

        // Execute command
        async function executeCommand(event) {
            event.preventDefault();
            
            const channelId = document.getElementById('channelSelect').value;
            const command = document.getElementById('commandInput').value;
            const resultDiv = document.getElementById('executeResult');
            
            resultDiv.innerHTML = '<p style="color: #faa61a;">Executing...</p>';
            
            try {
                const response = await fetch('/execute', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ channelId, command })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    resultDiv.innerHTML = `<p style="color: #43b581;">‚úÖ ${result.message}</p>`;
                    document.getElementById('commandInput').value = '';
                } else {
                    resultDiv.innerHTML = `<p style="color: #ed4245;">‚ùå ${result.error}</p>`;
                }
            } catch (error) {
                resultDiv.innerHTML = `<p style="color: #ed4245;">‚ùå Error: ${error.message}</p>`;
            }
        }

        // Toggle command enabled/disabled
        async function toggleCommand(id) {
            try {
                const response = await fetch(`/commands/toggle/${id}`, {
                    method: 'POST'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    location.reload();
                } else {
                    alert('Error toggling command: ' + result.error);
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }

        // Load channels on page load
        async function loadChannels() {
            try {
                const response = await fetch('/api/channels');
                const result = await response.json();
                
                if (result.success) {
                    const select = document.getElementById('channelSelect');
                    result.channels.forEach(channel => {
                        const option = document.createElement('option');
                        option.value = channel.id;
                        option.textContent = `#${channel.name}`;
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading channels:', error);
            }
        }

        // Load channels when page loads
        window.addEventListener('DOMContentLoaded', loadChannels);
    </script>

    <style>
        .form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .form-actions {
            display: flex;
            gap: 1rem;
            justify-content: center;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border);
            margin-top: 2rem;
        }

        .quick-execute {
            display: grid;
            grid-template-columns: 1fr 2fr auto;
            gap: 1rem;
            align-items: end;
        }

        .commands-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .command-card {
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid var(--border);
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
        }

        .command-card:hover {
            border-color: rgba(88, 101, 242, 0.5);
            box-shadow: 0 4px 20px rgba(88, 101, 242, 0.2);
            transform: translateY(-2px);
        }

        .command-card.disabled {
            opacity: 0.6;
        }

        .command-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1rem;
        }

        .command-header h3 {
            margin: 0 0 0.5rem 0;
            color: #fff;
            font-size: 1.2rem;
        }

        .command-actions {
            display: flex;
            gap: 0.5rem;
        }

        .command-desc {
            color: var(--text-secondary);
            margin-bottom: 1rem;
        }

        .command-meta {
            display: flex;
            gap: 1.5rem;
            flex-wrap: wrap;
            font-size: 0.85rem;
            color: var(--text-muted);
        }

        .meta-item strong {
            color: var(--text-primary);
        }

        .badge-general { background: rgba(88, 101, 242, 0.2); color: #5865f2; }
        .badge-fun { background: rgba(250, 166, 26, 0.2); color: #faa61a; }
        .badge-moderation { background: rgba(237, 66, 69, 0.2); color: #ed4245; }
        .badge-info { background: rgba(67, 181, 129, 0.2); color: #43b581; }
        .badge-utility { background: rgba(0, 176, 244, 0.2); color: #00b0f4; }
        .badge-custom { background: rgba(153, 170, 181, 0.2); color: #99aab5; }

        @media (max-width: 768px) {
            .form-grid {
                grid-template-columns: 1fr;
            }

            .quick-execute {
                grid-template-columns: 1fr;
            }

            .commands-header {
                flex-direction: column;
                gap: 1rem;
            }
        }
    </style>
</body>
</html>