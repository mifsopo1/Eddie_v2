<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Custom Commands - Discord Logger</title>
    <link rel="stylesheet" href="/css/style.css">
    <style>
        /* Inline Navbar Styles */
        .navbar {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding: 0.75rem 1.5rem;
            position: sticky;
            top: 0;
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 1.5rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }
        .nav-brand { display: flex; align-items: center; gap: 0.75rem; flex-shrink: 0; }
        .bot-avatar { width: 40px; height: 40px; border-radius: 50%; border: 2px solid rgba(88, 101, 242, 0.5); box-shadow: 0 0 12px rgba(88, 101, 242, 0.3); }
        .bot-info { display: flex; flex-direction: column; gap: 0.15rem; }
        .bot-info h2 { color: #fff; font-size: 1.1rem; margin: 0; font-weight: 600; line-height: 1; }
        .bot-status { color: #43b581; font-size: 0.7rem; font-weight: 500; line-height: 1; }
        .nav-center { flex: 1; display: flex; justify-content: center; overflow-x: auto; }
        .nav-links { display: flex; gap: 0.35rem; flex-wrap: nowrap; justify-content: center; }
        .nav-links a { color: var(--text-secondary); text-decoration: none; padding: 0.5rem 0.85rem; border-radius: 6px; transition: all 0.2s ease; font-weight: 500; font-size: 0.85rem; display: flex; align-items: center; gap: 0.4rem; white-space: nowrap; }
        .nav-icon { font-size: 0.95rem; }
        .nav-links a:hover { background: rgba(255, 255, 255, 0.1); color: #fff; transform: translateY(-1px); }
        .nav-links a.active { background: rgba(88, 101, 242, 0.25); color: var(--primary); box-shadow: 0 2px 8px rgba(88, 101, 242, 0.3); }
        .nav-user { display: flex; align-items: center; gap: 0.75rem; flex-shrink: 0; }
        .user-profile { display: flex; align-items: center; gap: 0.6rem; background: rgba(0, 0, 0, 0.3); padding: 0.4rem 0.8rem; border-radius: 8px; border: 1px solid rgba(255, 255, 255, 0.1); transition: all 0.3s ease; }
        .user-profile:hover { background: rgba(0, 0, 0, 0.4); border-color: rgba(88, 101, 242, 0.5); }
        .user-avatar { width: 32px; height: 32px; border-radius: 50%; border: 2px solid rgba(255, 255, 255, 0.2); }
        .user-avatar-placeholder { width: 32px; height: 32px; border-radius: 50%; background: rgba(88, 101, 242, 0.3); display: flex; align-items: center; justify-content: center; font-size: 1.3rem; border: 2px solid rgba(255, 255, 255, 0.2); }
        .user-details { display: flex; flex-direction: column; gap: 0.15rem; }
        .user-name { color: #fff; font-weight: 600; font-size: 0.85rem; line-height: 1; }
        .user-badge { font-size: 0.65rem; font-weight: 700; padding: 0.1rem 0.4rem; border-radius: 3px; text-transform: uppercase; letter-spacing: 0.3px; width: fit-content; line-height: 1; }
        .user-badge.admin { background: rgba(88, 101, 242, 0.3); color: #5865f2; }
        .user-badge.password { background: rgba(250, 166, 26, 0.3); color: #faa61a; }
        .logout-btn { background: rgba(237, 66, 69, 0.2); color: var(--danger); padding: 0.5rem; border-radius: 6px; transition: all 0.2s ease; display: flex; align-items: center; justify-content: center; text-decoration: none; border: 1px solid rgba(237, 66, 69, 0.3); width: 36px; height: 36px; }
        .logout-btn:hover { background: rgba(237, 66, 69, 0.3); transform: scale(1.08); }
        @media (max-width: 1400px) {
            .nav-links a span:not(.nav-icon) { display: none; }
            .nav-links a { padding: 0.5rem 0.6rem; }
        }
        @media (max-width: 1024px) {
            .navbar { flex-wrap: wrap; padding: 0.75rem 1rem; }
            .nav-center { order: 3; width: 100%; margin-top: 0.75rem; justify-content: flex-start; }
            .nav-links { justify-content: flex-start; }
            .bot-status { display: none; }
        }
        @media (max-width: 768px) {
            .navbar { padding: 0.6rem 0.8rem; }
            .bot-avatar { width: 36px; height: 36px; }
            .bot-info h2 { font-size: 1rem; }
            .user-details { display: none; }
            .user-avatar, .user-avatar-placeholder { width: 36px; height: 36px; }
            .nav-center { overflow-x: auto; -webkit-overflow-scrolling: touch; scrollbar-width: none; }
            .nav-center::-webkit-scrollbar { display: none; }
            .nav-links { gap: 0.25rem; }
            .nav-links a { padding: 0.45rem 0.55rem; font-size: 0.8rem; }
        }

        /* Multi-select styling */
        select[multiple] {
            padding: 0.5rem;
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            color: #fff;
        }

        select[multiple] option {
            padding: 0.5rem;
            margin: 0.25rem 0;
            border-radius: 4px;
            cursor: pointer;
        }

        select[multiple] option:hover {
            background: rgba(88, 101, 242, 0.3);
        }

        select[multiple] option:checked {
            background: rgba(88, 101, 242, 0.5);
        }

        .role-badge {
            background: rgba(237, 66, 69, 0.2);
            color: #ed4245;
            padding: 0.25rem 0.6rem;
            border-radius: 4px;
            font-size: 0.75rem;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
        }

        .role-badge.exempt {
            background: rgba(67, 181, 129, 0.2);
            color: #43b581;
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="nav-brand">
            <img src="<%= client.user.displayAvatarURL({ size: 64 }) %>" alt="Bot Avatar" class="bot-avatar">
            <div class="bot-info">
                <h2>Drug Dealer Simulator | Eddie</h2>
                <span class="bot-status">Online ‚Ä¢ Monitoring</span>
            </div>
        </div>
        
        <div class="nav-center">
            <div class="nav-links">
                <a href="/" class="<%= typeof page !== 'undefined' && page === 'dashboard' ? 'active' : '' %>">
                    <span class="nav-icon">üìä</span> Dashboard
                </a>
                <a href="/messages" class="<%= typeof page !== 'undefined' && page === 'messages' ? 'active' : '' %>">
                    <span class="nav-icon">üí¨</span> Messages
                </a>
                <a href="/deleted" class="<%= typeof page !== 'undefined' && page === 'deleted' ? 'active' : '' %>">
                    <span class="nav-icon">üóëÔ∏è</span> Deleted
                </a>
                <a href="/members" class="<%= typeof page !== 'undefined' && page === 'members' ? 'active' : '' %>">
                    <span class="nav-icon">üë•</span> Members
                </a>
                <a href="/moderation" class="<%= typeof page !== 'undefined' && page === 'moderation' ? 'active' : '' %>">
                    <span class="nav-icon">üî®</span> Moderation
                </a>
                <a href="/attachments" class="<%= typeof page !== 'undefined' && page === 'attachments' ? 'active' : '' %>">
                    <span class="nav-icon">üìé</span> Attachments
                </a>
                <a href="/voice" class="<%= typeof page !== 'undefined' && page === 'voice' ? 'active' : '' %>">
                    <span class="nav-icon">üîä</span> Voice
                </a>
                <a href="/invites" class="<%= typeof page !== 'undefined' && page === 'invites' ? 'active' : '' %>">
                    <span class="nav-icon">üé´</span> Invites
                </a>
                <a href="/commands" class="active" class="<%= typeof page !== 'undefined' && page === 'commands' ? 'active' : '' %>">
                    <span class="nav-icon">‚öôÔ∏è</span> Commands
                </a>
                <a href="/analytics" class="<%= typeof page !== 'undefined' && page === 'analytics' ? 'active' : '' %>">
                    <span class="nav-icon">üìà</span> Analytics
                </a>
            </div>
        </div>

        <div class="nav-user">
            <% if (user) { %>
                <div class="user-profile">
                    <img src="<%= user.avatar %>" alt="<%= user.username %>" class="user-avatar">
                    <div class="user-details">
                        <span class="user-name"><%= user.username %></span>
                        <span class="user-badge admin">Admin</span>
                    </div>
                </div>
            <% } else { %>
                <div class="user-profile">
                    <div class="user-avatar-placeholder">üë§</div>
                    <div class="user-details">
                        <span class="user-name">Admin</span>
                        <span class="user-badge password">Password Auth</span>
                    </div>
                </div>
            <% } %>
            
            <a href="/logout" class="logout-btn" title="Logout">
                <span class="nav-icon">üö™</span>
            </a>
        </div>
    </nav>

    <!-- Header Section -->
    <div class="container" style="margin-top: 2rem; max-width: 1400px; padding: 0 1.5rem;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 2rem; flex-wrap: wrap; gap: 1rem;">
            <div>
                <h1 style="color: #fff; margin-bottom: 0.5rem; font-size: 2rem;">
                    üéÆ Custom Commands Manager
                </h1>
                <p style="color: rgba(255,255,255,0.6); margin: 0;">
                    Manage custom commands for your Discord server
                </p>
            </div>
            <div style="display: flex; gap: 0.75rem; flex-wrap: wrap;">
                <a href="/commands/settings" style="background: #5865F2; color: white; padding: 0.75rem 1.5rem; border-radius: 8px; text-decoration: none; display: inline-flex; align-items: center; gap: 0.5rem; font-weight: 600; transition: all 0.2s ease; border: none;">
                    <span style="font-size: 1.1rem;">‚öôÔ∏è</span> Command Settings
                </a>
                <button onclick="toggleCreateForm()" style="background: #43B581; color: white; padding: 0.75rem 1.5rem; border-radius: 8px; display: inline-flex; align-items: center; gap: 0.5rem; font-weight: 600; transition: all 0.2s ease; border: none; cursor: pointer;">
                    <span style="font-size: 1.1rem;">‚ûï</span> Create New Command
                </button>
            </div>
        </div>
    <!-- Quick Execute Command -->
        <div class="section">
            <h2 class="section-title">‚ö° Quick Execute</h2>
            <form onsubmit="executeCommand(event)" class="quick-execute">
                <div class="form-group">
                    <label>Channel</label>
                    <select id="channelSelect" required>
                        <option value="">Select Channel...</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Command</label>
                    <input type="text" id="commandInput" placeholder="Enter command..." required>
                </div>
                <button type="submit" class="btn btn-primary" style="margin-top: 22px;">Execute</button>
            </form>
            <div id="executeResult"></div>
        </div>

        <!-- Create Command Form (Hidden by default) -->
        <div class="section" id="createCommandSection" style="display: none;">
            <h2 class="section-title">üìù Create New Command</h2>
            <form method="POST" action="/commands/create">
                <div class="form-grid">
                    <!-- Left Column -->
                    <div>
                        <div class="form-group">
                            <label>Command Name *</label>
                            <input type="text" name="name" placeholder="My Command" required>
                        </div>
                        
                        <div class="form-group">
                            <label>Category</label>
                            <select name="category">
                                <option value="general">General</option>
                                <option value="fun">Fun</option>
                                <option value="moderation">Moderation</option>
                                <option value="info">Info</option>
                                <option value="utility">Utility</option>
                                <option value="custom">Custom</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>Description</label>
                            <textarea name="description" rows="2" placeholder="What does this command do?"></textarea>
                        </div>

                        <div class="form-group">
                            <label>Trigger Type</label>
                            <select name="triggerType">
                                <option value="command">Command (!hello)</option>
                                <option value="exact">Exact Match</option>
                                <option value="contains">Contains Text</option>
                                <option value="startswith">Starts With</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>Trigger Text *</label>
                            <input type="text" name="trigger" placeholder="hello, hi, hey" required>
                            <small>Separate multiple triggers with commas</small>
                        </div>

                        <!-- Role Requirements -->
                        <div class="form-group">
                            <label>Required Roles <span style="color: rgba(255,255,255,0.5);">(optional)</span></label>
                            <select name="requiredRoles" id="requiredRolesSelect" multiple style="height: 120px;">
                                <!-- Roles will be loaded via JavaScript -->
                            </select>
                            <small>User must have at least ONE of these roles to use the command</small>
                        </div>

                        <!-- Role Exemptions -->
                        <div class="form-group">
                            <label>Exempt Roles <span style="color: rgba(255,255,255,0.5);">(optional)</span></label>
                            <select name="exemptRoles" id="exemptRolesSelect" multiple style="height: 120px;">
                                <!-- Roles will be loaded via JavaScript -->
                            </select>
                            <small>Users with these roles can use the command regardless of requirements</small>
                        </div>
                    </div>

                    <!-- Right Column -->
                    <div>
                        <div class="form-group">
                            <label>Response Type</label>
                            <select name="responseType">
                                <option value="text">Text Message</option>
                                <option value="embed">Embed</option>
                                <option value="react">Reaction Only</option>
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label>Message Content</label>
                            <textarea name="response" rows="4" placeholder="Hello {user}! Welcome to {server}"></textarea>
                            <small>Variables: {user}, {channel}, {server}, {membercount}</small>
                        </div>

                        <div class="form-group">
                            <label>
                                <input type="checkbox" name="enabled" checked>
                                Enabled
                            </label>
                        </div>

                        <div class="form-group">
                            <label>
                                <input type="checkbox" name="deleteTrigger">
                                Delete Trigger Message
                            </label>
                        </div>
                    </div>
                </div>
                
                <div class="form-actions">
                    <button type="button" onclick="toggleCreateForm()" class="btn btn-secondary">Cancel</button>
                    <button type="submit" class="btn btn-primary btn-large">üíæ Create Command</button>
                </div>
            </form>
        </div>

        <!-- Existing Commands -->
        <div class="section">
            <h2 class="section-title">üìã Command List</h2>
            
            <div class="tabs">
                <button class="tab active" onclick="filterCommands('all')">All</button>
                <button class="tab" onclick="filterCommands('general')">General</button>
                <button class="tab" onclick="filterCommands('fun')">Fun</button>
                <button class="tab" onclick="filterCommands('moderation')">Moderation</button>
                <button class="tab" onclick="filterCommands('info')">Info</button>
                <button class="tab" onclick="filterCommands('utility')">Utility</button>
                <button class="tab" onclick="filterCommands('custom')">Custom</button>
                <button class="tab" onclick="window.location.href='/commands/all'" style="background: rgba(88, 101, 242, 0.2); border: 1px solid rgba(88, 101, 242, 0.3);">
                    ‚öôÔ∏è All Commands (Built-in + Custom)
                </button>
            </div>

            <div class="commands-table">
                <% if (commands && commands.length > 0) { %>
                    <% commands.forEach(cmd => { %>
                        <div class="command-card <%= cmd.enabled ? '' : 'disabled' %>" data-category="<%= cmd.category || 'general' %>">
                            <div class="command-header">
                                <div>
                                    <h3><%= cmd.name %></h3>
                                    <div>
                                        <span class="badge badge-<%= cmd.category || 'general' %>"><%= cmd.category || 'general' %></span>
                                        <span class="badge <%= cmd.enabled ? 'badge-enabled' : 'badge-disabled' %>">
                                            <%= cmd.enabled ? 'Enabled' : 'Disabled' %>
                                        </span>
                                    </div>
                                </div>
                                <div class="command-actions">
                                    <button class="btn-icon" onclick="editCommand('<%= cmd._id %>')" title="Edit">
                                        ‚úèÔ∏è
                                    </button>
                                    <button class="btn-icon toggle" onclick="toggleCommand('<%= cmd._id %>')" title="Toggle Enable/Disable">
                                        <%= cmd.enabled ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è' %>
                                    </button>
                                    <button class="btn-icon delete" onclick="if(confirm('Delete this command?')) { window.location.href='/commands/delete/<%= cmd._id %>' }" title="Delete Command">
                                        üóëÔ∏è
                                    </button>
                                </div>
                            </div>
                            
                            <% if (cmd.description) { %>
                                <p class="command-desc"><%= cmd.description %></p>
                            <% } %>
                            
                            <div class="command-meta">
                                <div class="meta-item">
                                    <strong>Trigger</strong>
                                    <span><%= cmd.triggerType === 'command' ? '!' : '' %><%= Array.isArray(cmd.trigger) ? cmd.trigger.join(', ') : cmd.trigger %></span>
                                </div>
                                <div class="meta-item">
                                    <strong>Type</strong>
                                    <span><%= cmd.responseType %></span>
                                </div>
                                <div class="meta-item">
                                    <strong>Uses</strong>
                                    <span><%= cmd.uses || 0 %></span>
                                </div>
                            </div>

                            <!-- Add Role Information -->
                            <% if ((cmd.requiredRoles && cmd.requiredRoles.length > 0) || (cmd.exemptRoles && cmd.exemptRoles.length > 0)) { %>
                                <div class="command-roles" style="margin-top: 1rem; padding-top: 1rem; border-top: 1px solid rgba(255,255,255,0.1);">
                                    <% if (cmd.requiredRoles && cmd.requiredRoles.length > 0) { %>
                                        <div style="margin-bottom: 0.5rem;">
                                            <strong style="color: rgba(255,255,255,0.6); font-size: 0.75rem; text-transform: uppercase;">Required Roles:</strong>
                                            <div style="display: flex; flex-wrap: wrap; gap: 0.25rem; margin-top: 0.25rem;">
                                                <% cmd.requiredRoles.forEach(roleId => { %>
                                                    <span class="role-badge" data-role-id="<%= roleId %>">
                                                        üîí <%= roleId %>
                                                    </span>
                                                <% }) %>
                                            </div>
                                        </div>
                                    <% } %>
                                    <% if (cmd.exemptRoles && cmd.exemptRoles.length > 0) { %>
                                        <div>
                                            <strong style="color: rgba(255,255,255,0.6); font-size: 0.75rem; text-transform: uppercase;">Exempt Roles:</strong>
                                            <div style="display: flex; flex-wrap: wrap; gap: 0.25rem; margin-top: 0.25rem;">
                                                <% cmd.exemptRoles.forEach(roleId => { %>
                                                    <span class="role-badge exempt" data-role-id="<%= roleId %>">
                                                        ‚úÖ <%= roleId %>
                                                    </span>
                                                <% }) %>
                                            </div>
                                        </div>
                                    <% } %>
                                </div>
                            <% } %>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="empty-state">
                        <div class="empty-state-icon">üì¶</div>
                        <div class="empty-state-text">No commands yet</div>
                        <div class="empty-state-subtext">Create your first custom command to get started</div>
                    </div>
                <% } %>
            </div>
        </div>
    </div>
    <!-- End Main Content Container -->
     <!-- Edit Command Modal (Outside main container) -->
    <div id="editModal" class="modal" style="display: none;">
        <div class="modal-content">
            <div class="modal-header">
                <h2>‚úèÔ∏è Edit Command</h2>
                <span class="close" onclick="closeEditModal()">&times;</span>
            </div>
            <form id="editForm" method="POST">
                <input type="hidden" id="edit_id" name="id">
                
                <div class="form-row">
                    <div class="form-group">
                        <label>Command Name *</label>
                        <input type="text" id="edit_name" name="name" required>
                    </div>
                    
                    <div class="form-group">
                        <label>Category</label>
                        <select id="edit_category" name="category">
                            <option value="general">General</option>
                            <option value="fun">Fun</option>
                            <option value="moderation">Moderation</option>
                            <option value="info">Info</option>
                            <option value="utility">Utility</option>
                            <option value="custom">Custom</option>
                        </select>
                    </div>
                </div>
                
                <div class="form-group">
                    <label>Description</label>
                    <input type="text" id="edit_description" name="description">
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label>Trigger Type</label>
                        <select id="edit_triggerType" name="triggerType" onchange="updateTriggerHelp()">
                            <option value="command">Command (!trigger)</option>
                            <option value="exact">Exact Match</option>
                            <option value="contains">Contains Word/Phrase</option>
                            <option value="startswith">Starts With</option>
                            <option value="regex">Regex Pattern</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label>Trigger(s) *</label>
                        <input type="text" id="edit_trigger" name="trigger" required>
                        <small id="edit_triggerHelp" class="help-text">Separate multiple with commas</small>
                    </div>
                </div>
                
                <div class="form-group">
                    <label>Response Type</label>
                    <select id="edit_responseType" name="responseType" onchange="updateResponseType()">
                        <option value="text">Text Message</option>
                        <option value="embed">Embed</option>
                        <option value="react">Reaction Only</option>
                        <option value="multiple">Text + Reaction</option>
                        <option value="dm">DM User</option>
                    </select>
                </div>
                
                <div id="edit_textResponse" class="form-group">
                    <label>Response Text</label>
                    <textarea id="edit_response" name="response" rows="4"></textarea>
                    <small>Variables: {user}, {user.mention}, {channel}, {server}, {args}</small>
                </div>
                
                <div id="edit_embedResponse" style="display: none;">
                    <div class="form-group">
                        <label>Embed Title</label>
                        <input type="text" id="edit_embedTitle" name="embedTitle">
                    </div>
                    <div class="form-group">
                        <label>Embed Description</label>
                        <textarea id="edit_embedDescription" name="embedDescription" rows="4"></textarea>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>Embed Color</label>
                            <input type="color" id="edit_embedColor" name="embedColor" value="#5865f2">
                        </div>
                        <div class="form-group">
                            <label>Footer Text</label>
                            <input type="text" id="edit_embedFooter" name="embedFooter">
                        </div>
                    </div>
                </div>
                
                <div id="edit_reactionResponse" style="display: none;">
                    <div class="form-group">
                        <label>Reaction Emoji</label>
                        <input type="text" id="edit_reactionEmoji" name="reactionEmoji" placeholder="üëç or custom:emojiname">
                    </div>
                </div>

                <!-- Role Fields -->
                <div class="form-row">
                    <div class="form-group">
                        <label>Required Roles</label>
                        <select id="edit_requiredRoles" name="requiredRoles" multiple style="height: 120px;">
                            <!-- Will be populated by JS -->
                        </select>
                        <small>User must have at least ONE of these roles</small>
                    </div>
                    
                    <div class="form-group">
                        <label>Exempt Roles</label>
                        <select id="edit_exemptRoles" name="exemptRoles" multiple style="height: 120px;">
                            <!-- Will be populated by JS -->
                        </select>
                        <small>These roles bypass all requirements</small>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label>
                            <input type="checkbox" id="edit_enabled" name="enabled">
                            Enabled
                        </label>
                    </div>
                    <div class="form-group">
                        <label>
                            <input type="checkbox" id="edit_deleteTrigger" name="deleteTrigger">
                            Delete Trigger Message
                        </label>
                    </div>
                </div>
                
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" onclick="closeEditModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">üíæ Save Changes</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Toggle create form
        function toggleCreateForm() {
            const form = document.getElementById('createCommandSection');
            form.style.display = form.style.display === 'none' ? 'block' : 'none';
        }

        // Filter commands by category
        function filterCommands(category) {
            const commands = document.querySelectorAll('.command-card');
            const tabs = document.querySelectorAll('.tab');
            
            tabs.forEach(tab => tab.classList.remove('active'));
            event.target.classList.add('active');
            
            commands.forEach(cmd => {
                if (category === 'all' || cmd.dataset.category === category) {
                    cmd.style.display = 'block';
                } else {
                    cmd.style.display = 'none';
                }
            });
        }

        // Execute command
        async function executeCommand(event) {
            event.preventDefault();
            
            const channelId = document.getElementById('channelSelect').value;
            const command = document.getElementById('commandInput').value;
            const resultDiv = document.getElementById('executeResult');
            
            resultDiv.innerHTML = '<p style="color: #faa61a;">Executing...</p>';
            
            try {
                const response = await fetch('/execute', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ channelId, command })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    resultDiv.innerHTML = `<p style="color: #43b581;">‚úÖ ${result.message}</p>`;
                    document.getElementById('commandInput').value = '';
                } else {
                    resultDiv.innerHTML = `<p style="color: #ed4245;">‚ùå ${result.error}</p>`;
                }
            } catch (error) {
                resultDiv.innerHTML = `<p style="color: #ed4245;">‚ùå Error: ${error.message}</p>`;
            }
        }

        // Toggle command enabled/disabled
        async function toggleCommand(id) {
            try {
                const response = await fetch(`/commands/toggle/${id}`, {
                    method: 'POST'
                });
                
                const result = await response.json();
                
                if (result.success) {
                    location.reload();
                } else {
                    alert('Error toggling command: ' + result.error);
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }

        // Edit command function
        async function editCommand(id) {
            try {
                // Fetch command data
                const response = await fetch(`/api/commands/${id}`);
                const result = await response.json();
                
                if (result.success) {
                    const cmd = result.command;
                    
                    // Populate form fields
                    document.getElementById('edit_id').value = cmd._id;
                    document.getElementById('edit_name').value = cmd.name;
                    document.getElementById('edit_category').value = cmd.category || 'general';
                    document.getElementById('edit_description').value = cmd.description || '';
                    document.getElementById('edit_triggerType').value = cmd.triggerType || 'command';
                    document.getElementById('edit_trigger').value = Array.isArray(cmd.trigger) ? cmd.trigger.join(', ') : cmd.trigger;
                    document.getElementById('edit_responseType').value = cmd.responseType || 'text';
                    document.getElementById('edit_response').value = cmd.response || '';
                    document.getElementById('edit_enabled').checked = cmd.enabled;
                    document.getElementById('edit_deleteTrigger').checked = cmd.deleteTrigger || false;
                    
                    // Handle embed fields if they exist
                    if (cmd.embedTitle) document.getElementById('edit_embedTitle').value = cmd.embedTitle;
                    if (cmd.embedDescription) document.getElementById('edit_embedDescription').value = cmd.embedDescription;
                    if (cmd.embedColor) document.getElementById('edit_embedColor').value = cmd.embedColor;
                    if (cmd.embedFooter) document.getElementById('edit_embedFooter').value = cmd.embedFooter;
                    if (cmd.reactionEmoji) document.getElementById('edit_reactionEmoji').value = cmd.reactionEmoji;
                    
                    // Load roles for edit modal
                    const rolesResponse = await fetch('/api/roles');
                    const rolesResult = await rolesResponse.json();
                    
                    if (rolesResult.success) {
                        const requiredSelect = document.getElementById('edit_requiredRoles');
                        const exemptSelect = document.getElementById('edit_exemptRoles');
                        
                        // Clear existing options
                        requiredSelect.innerHTML = '';
                        exemptSelect.innerHTML = '';
                        
                        rolesResult.roles.forEach(role => {
                            // Required roles
                            const option1 = document.createElement('option');
                            option1.value = role.id;
                            option1.textContent = role.name;
                            option1.selected = cmd.requiredRoles && cmd.requiredRoles.includes(role.id);
                            requiredSelect.appendChild(option1);
                            
                            // Exempt roles
                            const option2 = document.createElement('option');
                            option2.value = role.id;
                            option2.textContent = role.name;
                            option2.selected = cmd.exemptRoles && cmd.exemptRoles.includes(role.id);
                            exemptSelect.appendChild(option2);
                        });
                    }
                    
                    // Update form action
                    document.getElementById('editForm').action = `/commands/edit/${cmd._id}`;
                    
                    // Show/hide response type sections
                    updateResponseType();
                    
                    // Show modal
                    document.getElementById('editModal').style.display = 'block';
                } else {
                    alert('Error loading command: ' + result.error);
                }
            } catch (error) {
                alert('Error: ' + error.message);
            }
        }

        // Close modal
        function closeEditModal() {
            document.getElementById('editModal').style.display = 'none';
        }

        // Update response type visibility
        function updateResponseType() {
            const responseType = document.getElementById('edit_responseType').value;
            const textResponse = document.getElementById('edit_textResponse');
            const embedResponse = document.getElementById('edit_embedResponse');
            const reactionResponse = document.getElementById('edit_reactionResponse');
            
            textResponse.style.display = 'none';
            embedResponse.style.display = 'none';
            reactionResponse.style.display = 'none';
            
            if (responseType === 'text' || responseType === 'dm' || responseType === 'multiple') {
                textResponse.style.display = 'block';
            }
            if (responseType === 'embed') {
                embedResponse.style.display = 'block';
            }
            if (responseType === 'react' || responseType === 'multiple') {
                reactionResponse.style.display = 'block';
            }
        }

        // Update trigger help text
        function updateTriggerHelp() {
            const triggerType = document.getElementById('edit_triggerType').value;
            const helpText = document.getElementById('edit_triggerHelp');
            
            switch(triggerType) {
                case 'command':
                    helpText.textContent = 'Separate multiple with commas (e.g., hello, hi, hey)';
                    break;
                case 'exact':
                    helpText.textContent = 'Exact phrase match (case-insensitive)';
                    break;
                case 'contains':
                    helpText.textContent = 'Triggers if message contains this text';
                    break;
                case 'startswith':
                    helpText.textContent = 'Triggers if message starts with this text';
                    break;
                case 'regex':
                    helpText.textContent = 'Advanced: Use regex pattern (e.g., /hello|hi/i)';
                    break;
            }
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('editModal');
            if (event.target == modal) {
                closeEditModal();
            }
        }

        // Load channels on page load
        async function loadChannels() {
            try {
                const response = await fetch('/api/channels');
                const result = await response.json();
                
                if (result.success) {
                    const select = document.getElementById('channelSelect');
                    result.channels.forEach(channel => {
                        const option = document.createElement('option');
                        option.value = channel.id;
                        option.textContent = `#${channel.name}`;
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading channels:', error);
            }
        }

        // Load roles for the create form
        async function loadRolesForCreate() {
            try {
                const response = await fetch('/api/roles');
                const result = await response.json();
                
                if (result.success) {
                    const requiredSelect = document.getElementById('requiredRolesSelect');
                    const exemptSelect = document.getElementById('exemptRolesSelect');
                    
                    result.roles.forEach(role => {
                        // Add to required roles
                        const option1 = document.createElement('option');
                        option1.value = role.id;
                        option1.textContent = role.name;
                        requiredSelect.appendChild(option1);
                        
                        // Add to exempt roles
                        const option2 = document.createElement('option');
                        option2.value = role.id;
                        option2.textContent = role.name;
                        exemptSelect.appendChild(option2);
                    });
                }
            } catch (error) {
                console.error('Error loading roles:', error);
            }
        }

        // Load role names for display
        async function loadRoleNames() {
            try {
                const response = await fetch('/api/roles');
                const result = await response.json();
                
                if (result.success) {
                    // Create a map of role IDs to role names
                    const roleMap = new Map();
                    result.roles.forEach(role => {
                        roleMap.set(role.id, role.name);
                    });
                    
                    // Update all role badges with actual names
                    document.querySelectorAll('.role-badge').forEach(badge => {
                        const roleId = badge.dataset.roleId;
                        const roleName = roleMap.get(roleId);
                        if (roleName) {
                            const icon = badge.textContent.includes('üîí') ? 'üîí' : '‚úÖ';
                            badge.textContent = `${icon} ${roleName}`;
                        }
                    });
                }
            } catch (error) {
                console.error('Error loading role names:', error);
            }
        }

        // Load channels and roles when page loads
        window.addEventListener('DOMContentLoaded', () => {
            loadChannels();
            loadRolesForCreate();
            loadRoleNames();
        });
    </script>

    <style>
        .form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            margin-bottom: 2rem;
        }

        .form-actions {
            display: flex;
            gap: 1rem;
            justify-content: center;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border);
            margin-top: 2rem;
        }

        .quick-execute {
            display: grid;
            grid-template-columns: 1fr 2fr auto;
            gap: 1rem;
            align-items: end;
        }

        .commands-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        /* Enhanced Command Card Styles (Like Moderation Log) */
        .command-card {
            background: linear-gradient(135deg, rgba(30, 33, 40, 0.95) 0%, rgba(20, 23, 28, 0.95) 100%);
            border: 1px solid rgba(88, 101, 242, 0.3);
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
            position: relative;
            overflow: hidden;
        }

        /* Colored top border glow effect */
        .command-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #5865f2, #7289da);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .command-card:hover::before {
            opacity: 1;
        }

        .command-card:hover {
            border-color: rgba(88, 101, 242, 0.6);
            box-shadow: 0 4px 20px rgba(88, 101, 242, 0.25);
            transform: translateY(-2px);
        }

        .command-card.disabled {
            opacity: 0.5;
            border-color: rgba(153, 170, 181, 0.3);
        }

        .command-card.disabled::before {
            background: linear-gradient(90deg, #99aab5, #747f8d);
        }

        .command-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .command-header > div:first-child {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .command-header h3 {
            margin: 0;
            color: #fff;
            font-size: 1.2rem;
            font-weight: 600;
        }

        .command-header .badge {
            display: inline-block;
            margin-right: 0.5rem;
        }

        .command-actions {
            display: flex;
            gap: 0.5rem;
            flex-shrink: 0;
        }

        .command-desc {
            color: var(--text-secondary);
            margin-bottom: 1rem;
            line-height: 1.5;
            font-size: 0.9rem;
        }

        /* Enhanced metadata grid */
        .command-meta {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            padding: 1rem;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 8px;
            font-size: 0.85rem;
        }

        .meta-item {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }

        .meta-item strong {
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            font-weight: 600;
        }

        .meta-item span {
            color: #fff;
            font-size: 0.9rem;
        }

        /* Category badge colors */
        .badge-general { background: rgba(88, 101, 242, 0.2); color: #5865f2; }
        .badge-fun { background: rgba(250, 166, 26, 0.2); color: #faa61a; }
        .badge-moderation { background: rgba(237, 66, 69, 0.2); color: #ed4245; }
        .badge-info { background: rgba(67, 181, 129, 0.2); color: #43b581; }
        .badge-utility { background: rgba(0, 176, 244, 0.2); color: #00b0f4; }
        .badge-custom { background: rgba(153, 170, 181, 0.2); color: #99aab5; }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 9999;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(4px);
        }

        .modal-content {
            background: linear-gradient(135deg, rgba(30, 33, 40, 0.98) 0%, rgba(20, 23, 28, 0.98) 100%);
            margin: 3% auto;
            padding: 2rem;
            border: 1px solid rgba(88, 101, 242, 0.3);
            border-radius: 12px;
            width: 90%;
            max-width: 800px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.5);
            position: relative;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-bottom: 1.5rem;
            margin-bottom: 2rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .modal-header h2 {
            margin: 0;
            color: #fff;
            font-size: 1.5rem;
        }

        .close {
            color: #aaa;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            transition: color 0.3s ease;
            line-height: 1;
        }

        .close:hover,
        .close:focus {
            color: #fff;
        }

        /* Edit Modal - More Padding */
        #editForm .form-group {
            margin-bottom: 1.5rem;
        }

        #editForm .form-group label {
            display: block;
            margin-bottom: 0.75rem;
            font-weight: 600;
            color: var(--text-primary);
        }

        #editForm input[type="text"],
        #editForm textarea,
        #editForm select,
        #editForm input[type="color"] {
            padding: 12px 15px;
            width: 100%;
        }

        #editForm textarea {
            padding: 12px 15px;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }

        /* Add spacing between different sections */
        #edit_embedResponse,
        #edit_reactionResponse {
            padding-top: 1.5rem;
            border-top: 1px solid var(--border);
            margin-top: 1rem;
        }

        .help-text {
            display: block;
            margin-top: 0.5rem;
            padding-top: 0.5rem;
        }

        /* Checkbox groups */
        #editForm input[type="checkbox"] {
            margin-right: 0.75rem;
        }

        @media (max-width: 768px) {
            .form-grid {
                grid-template-columns: 1fr;
            }

            .quick-execute {
                grid-template-columns: 1fr;
            }

            .commands-header {
                flex-direction: column;
                gap: 1rem;
            }

            .form-row {
                grid-template-columns: 1fr;
            }

            .command-meta {
                grid-template-columns: 1fr;
            }

            .modal-content {
                width: 95%;
                margin: 5% auto;
                padding: 1.5rem;
            }
        }
    </style>
</body>
</html>